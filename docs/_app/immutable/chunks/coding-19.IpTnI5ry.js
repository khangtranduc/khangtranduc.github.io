import{a as y,t as D}from"./disclose-version.w122s73S.js";import"./legacy.PYORki5n.js";import{L as s,M as m,N as l,O as o,P as F}from"./runtime.BcKyo7YD.js";import{h as a}from"./html.DxrNSgWl.js";const f={title:"coding-19",description:"kattis - fenwick",date:"2025-01-19T00:00:00.000Z",tags:["daily-coding"],published:!0};var d=D(`<h2>Kattis – fenwick</h2> <p>Today’s problem is quite exciting because I get to learn a new, cool data structure: <strong>the Fenwick (BIT) tree</strong>. Since its a new data structure, I have only done the <em>Entry Level</em> problem from <code>halim</code>.</p> <h2>Fenwick Tree</h2> <p>This structure is used for fast <span class="math math-inline"><!></span> <strong>dynamic</strong> prefix sum queries, where <span class="math math-inline"><!></span> is the length of the underlying array. In problem solving, the underlying array is frequently a frequency array.</p> <p>It makes frequent use of the <code>LSOne</code> operation (see [[coding-11]]).</p> <h3>structure</h3> <p>The Fenwick tree is essentially a tree whose parents and children are linked together by the <code>LSOne(S)</code> operation. This relationship is special because each branch of the Fenwick tree will cover the full range from <code>[1...i]</code> where <code>i</code> is the index of the <em>last parent</em>.</p> <p>Here the <em>last parent</em> is the index with only one 1 in its binary representation. To borrow a diagram from <code>halim</code>, the structure of the Fenwick tree is as such:
![[Pasted image 20250119133708.png|center]]</p> <h3>basic operations</h3> <p>The Fenwick Tree supports 2 basic operations:</p> <ul><li><code>update(i, v)</code>: update element <code>i</code> in <strong>underlying array</strong> with <code>v</code> (i.e. <code>a[i] += v</code>)</li> <li><code>rsq(j)</code>: find the prefix sum in range <code>[i...j]</code> <ul><li>this operation gives the range <code>[i...j]</code> trivially, i.e. <code>rsq(i,j) = rsq(j) - rsq(i-1)</code></li></ul></li></ul> <h3>implementation</h3> <p>The bare-bones implementation of the Fenwick Tree is quite simple and easy to remember:</p> <!> <h3>expansions</h3> <p>There are many expansions to the Fenwick Tree to optimize other common operations. I plan to explore those in the next few <code>daily-coding</code>s.</p> <h2>my solution (to Kattis – fenwick)</h2> <!>`,1);function w(r){var e=d(),n=s(m(e),6),p=s(l(n)),i=l(p);a(i,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m\\log m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>'),o(p);var t=s(p,4),A=l(t);a(A,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>'),o(t),F(),o(n);var c=s(n,20);a(c,()=>`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">#define </span><span style="color:#ADD7FF">LSOne</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">S</span><span style="color:#A6ACCD">) ((S) </span><span style="color:#91B4D5">&#x26;</span><span style="color:#91B4D5"> -</span><span style="color:#A6ACCD">(S))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E4F0FB">#typedef</span><span style="color:#A6ACCD"> vector</span><span style="color:#91B4D5">&#x3C;int></span><span style="color:#A6ACCD"> vi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">class</span><span style="color:#A6ACCDC0"> fenwick_tree</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">	private</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">		vi ft;</span></span>
<span class="line"><span style="color:#91B4D5">	public</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#ADD7FF">		fenwick_tree</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> m</span><span style="color:#A6ACCD">) &#123; </span><span style="color:#ADD7FF">ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">assign</span><span style="color:#A6ACCD">(m </span><span style="color:#91B4D5">+</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">); &#125;</span></span>
<span class="line"><span style="color:#91B4D5">		void</span><span style="color:#ADD7FF"> update</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> i</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> v</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">			for (; i </span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD"> (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD">) </span><span style="color:#ADD7FF">ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">size</span><span style="color:#A6ACCD">(); i </span><span style="color:#91B4D5">+=</span><span style="color:#ADD7FF"> LSOne</span><span style="color:#A6ACCD">(i))</span></span>
<span class="line"><span style="color:#ADD7FF">				ft</span><span style="color:#A6ACCD">[i] </span><span style="color:#91B4D5">+=</span><span style="color:#A6ACCD"> v;</span></span>
<span class="line"><span style="color:#A6ACCD">		&#125;</span></span>
<span class="line"><span style="color:#91B4D5">		int</span><span style="color:#ADD7FF"> rsq</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> j</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#91B4D5">			int</span><span style="color:#A6ACCD"> acc </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">			for (; j </span><span style="color:#91B4D5">></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">; j </span><span style="color:#91B4D5">-=</span><span style="color:#ADD7FF"> LSOne</span><span style="color:#A6ACCD">(S)) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">				acc </span><span style="color:#91B4D5">+=</span><span style="color:#ADD7FF"> ft</span><span style="color:#A6ACCD">[j];</span></span>
<span class="line"><span style="color:#A6ACCD">			&#125;</span></span>
<span class="line"><span style="color:#A6ACCD">			return acc;</span></span>
<span class="line"><span style="color:#A6ACCD">		&#125;</span></span>
<span class="line"><span style="color:#91B4D5">		int</span><span style="color:#ADD7FF"> rsq</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> i</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> j</span><span style="color:#A6ACCD">) &#123; return </span><span style="color:#ADD7FF">rsq</span><span style="color:#A6ACCD">(j) </span><span style="color:#91B4D5">-</span><span style="color:#ADD7FF"> rsq</span><span style="color:#A6ACCD">(i </span><span style="color:#91B4D5">-</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">); &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`);var C=s(c,8);a(C,()=>`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">#include </span><span style="color:#A6ACCD">&#x3C;</span><span style="color:#5DE4C7">bits/stdc++.h</span><span style="color:#A6ACCD">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">using</span><span style="color:#91B4D5"> namespace</span><span style="color:#91B4D5"> std</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">#define </span><span style="color:#ADD7FF">LSOne</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">S</span><span style="color:#A6ACCD">) ((S) </span><span style="color:#91B4D5">&#x26;</span><span style="color:#91B4D5"> -</span><span style="color:#A6ACCD">(S))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">typedef</span><span style="color:#A6ACCD"> vector</span><span style="color:#91B4D5">&#x3C;long</span><span style="color:#91B4D5"> long></span><span style="color:#A6ACCD"> vi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">class</span><span style="color:#A6ACCDC0"> FenwickTree</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    private</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">        vi ft;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">    public</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#ADD7FF">        FenwickTree</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> m</span><span style="color:#A6ACCD">) &#123; </span><span style="color:#ADD7FF">ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">assign</span><span style="color:#A6ACCD">(m </span><span style="color:#91B4D5">+</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">); &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">        void</span><span style="color:#ADD7FF"> update</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> i</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> v</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">            for (; i </span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD"> (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD">) </span><span style="color:#ADD7FF">ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">size</span><span style="color:#A6ACCD">(); i </span><span style="color:#91B4D5">+=</span><span style="color:#ADD7FF"> LSOne</span><span style="color:#A6ACCD">(i))</span></span>
<span class="line"><span style="color:#ADD7FF">                ft</span><span style="color:#A6ACCD">[i] </span><span style="color:#91B4D5">+=</span><span style="color:#A6ACCD"> v;</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">        </span></span>
<span class="line"><span style="color:#91B4D5">        long</span><span style="color:#91B4D5"> long</span><span style="color:#ADD7FF"> rsq</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> i</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#91B4D5">            long</span><span style="color:#91B4D5"> long</span><span style="color:#A6ACCD"> acc </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">            for(; i </span><span style="color:#91B4D5">></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">; i </span><span style="color:#91B4D5">-=</span><span style="color:#ADD7FF"> LSOne</span><span style="color:#A6ACCD">(i))</span></span>
<span class="line"><span style="color:#A6ACCD">                acc </span><span style="color:#91B4D5">+=</span><span style="color:#ADD7FF"> ft</span><span style="color:#A6ACCD">[i];</span></span>
<span class="line"><span style="color:#A6ACCD">            return acc;</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">int</span><span style="color:#ADD7FF"> main</span><span style="color:#A6ACCD">() &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    ios</span><span style="color:#A6ACCD">::</span><span style="color:#ADD7FF">sync_with_stdio</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#E4F0FB">    cin</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">tie</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">); </span><span style="color:#E4F0FB">cout</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">tie</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">    int</span><span style="color:#A6ACCD"> N, Q, i, e;</span></span>
<span class="line"><span style="color:#91B4D5">    char</span><span style="color:#A6ACCD"> op;</span></span>
<span class="line"><span style="color:#A6ACCD">    </span></span>
<span class="line"><span style="color:#A6ACCD">    cin </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> N </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> Q;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">    FenwickTree </span><span style="color:#ADD7FF">ft</span><span style="color:#A6ACCD">(N);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">    while (Q</span><span style="color:#91B4D5">--</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">        cin </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> op;</span></span>
<span class="line"><span style="color:#A6ACCD">        switch(op) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">            case </span><span style="color:#A6ACCD">'</span><span style="color:#5DE4C7">+</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">                cin </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> i </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> e;</span></span>
<span class="line"><span style="color:#ADD7FF">                ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">update</span><span style="color:#A6ACCD">(i </span><span style="color:#91B4D5">+</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">, e);</span></span>
<span class="line"><span style="color:#A6ACCD">                break;</span></span>
<span class="line"><span style="color:#A6ACCD">            case </span><span style="color:#A6ACCD">'</span><span style="color:#5DE4C7">?</span><span style="color:#A6ACCD">'</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">                cin </span><span style="color:#91B4D5">>></span><span style="color:#A6ACCD"> i;</span></span>
<span class="line"><span style="color:#A6ACCD">                cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#ADD7FF"> ft</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">rsq</span><span style="color:#A6ACCD">(i) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">                break;</span></span>
<span class="line"><span style="color:#A6ACCD">        &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">    return </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`),y(r,e)}export{w as default,f as metadata};
