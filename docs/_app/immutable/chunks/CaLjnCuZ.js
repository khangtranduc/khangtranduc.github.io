import"./CWj6FrbW.js";import"./DIt9Bumx.js";import{t as fs,h as B,g as $,C as hs,b0 as us,w as j,J as gs,_ as As,aA as xs,az as bs,am as T,k as Ds,al as _s,F as x,f as e,s as n,a as F,d as c,b as t,r,b1 as u}from"./CMtSGoh-.js";function p(l,s,a=!1,o=!1,m=!1){var y=l,f="";fs(()=>{var i=hs;if(f===(f=s()??"")){B&&$();return}if(i.nodes_start!==null&&(us(i.nodes_start,i.nodes_end),i.nodes_start=i.nodes_end=null),f!==""){if(B){j.data;for(var E=$(),g=E;E!==null&&(E.nodeType!==gs||E.data!=="");)g=E,E=As(E);if(E===null)throw xs(),bs;T(j,g),y=Ds(E);return}var h=f+"";a?h=`<svg>${h}</svg>`:o&&(h=`<math>${h}</math>`);var d=_s(h);if((a||o)&&(d=x(d)),T(x(d),d.lastChild),a||o)for(;x(d);)y.before(x(d));else y.before(d)}})}const q={title:"first codeforces contest!",description:"IAEPC Prelims and I got cooked",date:"2025-01-20T00:00:00.000Z",tags:["codeforces"],published:!0},{title:Sa,description:Ia,date:Ma,tags:Oa,published:za}=q;var vs=e('<p>No <code>daily-coding</code>s today because I finally did a codeforces contest! I was only able to pass the pre-tests for the first questions :((. Though I was able to attempt 4 questions.</p> <h2>my solutions</h2> <h3>part A:</h3> <p>This one was quite straight-forward, which was I its the only one I actually solved 💀.</p> <!> <h3>part B:</h3> <p>I believe that you need to check for cases (below) for this problem. However, this code does not pass all the pre-tests.</p> <!> <h3>part C:</h3> <p>This one was quite confusing, I was trying to brainstorm a solution involving maybe use of a table? with elements <span class="math math-inline"><!></span> that represented the number of states where <span class="math math-inline"><!></span> people to the left of <span class="math math-inline"><!></span> are liars. Eventually, I got too confused and gave up.</p> <h3>part D:</h3> <p>This solution I feel pretty proud about, essentially it erases the intersection of the two sets. Then it breaks the elements in <span class="math math-inline"><!></span> into <span class="math math-inline"><!></span> and <span class="math math-inline"><!></span> as there is only one unordered pair <span class="math math-inline"><!></span> such that <span class="math math-inline"><!></span>. <code>YES</code> if <span class="math math-inline"><!></span> and <span class="math math-inline"><!></span> becomes empty and <code>NO</code> if we encounter an impossible situation.</p> <p>Unfortunately, I just missed the deadline, so I wasn’t able to submit this. I will submit it to the practice judge later when that becomes available.</p> <p>Edit: It got TLE :((</p> <!>',1);function ws(l){var s=vs(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"><span style="color:#F8F8F2">     </span></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span>	</span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">	cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> t, n, a, odds </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, evens </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">	cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> t;</span></span>
<span class="line"><span style="color:#F8F8F2">	</span></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (t</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">		cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F92672">		while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">			cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (a </span><span style="color:#F92672">%</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">) odds</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">			else</span><span style="color:#F8F8F2"> evens</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">		cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> odds </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> +</span><span style="color:#AE81FF"> 2</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2"> ((</span><span style="color:#66D9EF;font-style:italic">bool</span><span style="color:#F8F8F2">) evens) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		odds </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; evens </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,6);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> vi;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span>	</span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">	cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> t, n, a;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	bool</span><span style="color:#F8F8F2"> flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">	cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> t;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F8F8F2">	map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> m;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#88846F">	// for every pair, find 2 more</span></span>
<span class="line"><span style="color:#88846F">	// only need to check the minimum num</span></span>
<span class="line"><span style="color:#88846F">	// nah, gotta check them all for case 2:</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (t</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">		cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F92672">		while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">			cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">m.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(a)) m[a] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">			else</span><span style="color:#F8F8F2"> m[a] </span><span style="color:#F92672">+=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">		for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> it </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> m.</span><span style="color:#A6E22E">begin</span><span style="color:#F8F8F2">(); </span><span style="color:#F92672">!</span><span style="color:#F8F8F2">flag </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> it </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> m.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">(); it</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">			pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> x </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">it, y, z;</span></span>
<span class="line"><span style="color:#F92672">			switch</span><span style="color:#F8F8F2"> (x.second) &#123;</span></span>
<span class="line"><span style="color:#F92672">				case</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F92672">					for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> jt </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> m.</span><span style="color:#A6E22E">begin</span><span style="color:#F8F8F2">(); </span><span style="color:#F92672">!</span><span style="color:#F8F8F2">flag </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> jt </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> m.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">(); jt</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">						if</span><span style="color:#F8F8F2"> (jt </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> it) </span><span style="color:#F92672">continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">						y </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">jt;</span></span>
<span class="line"><span style="color:#F92672">						if</span><span style="color:#F8F8F2"> (y.second </span><span style="color:#F92672">>=</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#88846F">							// we're done (rectangle)</span></span>
<span class="line"><span style="color:#F8F8F2">							flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">							int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">							while</span><span style="color:#F8F8F2"> (i</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">							cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> y.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> y.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">						&#125;</span></span>
<span class="line"><span style="color:#F92672">						else</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F92672">							if</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(jt, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> m.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">()) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">							if</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(jt, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> it) z </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(jt, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">							else</span><span style="color:#F8F8F2"> z </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(jt, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">							if</span><span style="color:#F8F8F2"> (</span><span style="color:#AE81FF">2</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> y.first </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> z.first) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">								flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">								cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first;</span></span>
<span class="line"><span style="color:#F8F8F2">								cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> y.first;</span></span>
<span class="line"><span style="color:#F8F8F2">								cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> z.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">							&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">						&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">					&#125;</span></span>
<span class="line"><span style="color:#F92672">					break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">				case</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">					// check one more</span></span>
<span class="line"><span style="color:#F92672">					if</span><span style="color:#F8F8F2"> (</span><span style="color:#AE81FF">3</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">*</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(it, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">)).first) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">						flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">						int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">						while</span><span style="color:#F8F8F2"> (i</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">						cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">*</span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(it, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">)).first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">					&#125;</span></span>
<span class="line"><span style="color:#F92672">					break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">				case</span><span style="color:#AE81FF"> 4</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">					// we're done (square)</span></span>
<span class="line"><span style="color:#F8F8F2">					flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">					int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">					while</span><span style="color:#F8F8F2"> (i</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">					cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x.first </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">					break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">			&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#F92672">		if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">flag) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F92672"> -</span><span style="color:#AE81FF">1</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		m.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var m=n(o,4),y=n(c(m)),f=c(y);p(f,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_k(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>'),r(y);var i=n(y,2),E=c(i);p(E,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>'),r(i);var g=n(i,2),h=c(g);p(h,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>'),r(g),u(),r(m);var d=n(m,4),A=n(c(d)),b=c(A);p(b,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>'),r(A);var D=n(A,2),cs=c(D);p(cs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>'),r(D);var _=n(D,2),rs=c(_);p(rs,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>'),r(_);var v=n(_,2),ys=c(v);p(ys,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>'),r(v);var w=n(v,2),is=c(w);p(is,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">x + y = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>'),r(w);var C=n(w,4),Es=c(C);p(Es,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>'),r(C);var k=n(C,2),ds=c(k);p(ds,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>'),r(k),u(3),r(d);var ms=n(d,6);p(ms,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> multiset</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ui;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> t, n, m, a, b;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    long</span><span style="color:#66D9EF;font-style:italic"> long</span><span style="color:#F8F8F2"> sa </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, sb </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> t;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">    // first pass to remove all common elements</span></span>
<span class="line"><span style="color:#88846F">    // is there any point saving? nah</span></span>
<span class="line"><span style="color:#88846F">    // for the rest, first do a sum check</span></span>
<span class="line"><span style="color:#88846F">    // break down each element in b into common elements</span></span>
<span class="line"><span style="color:#88846F">    // do one pass to remove</span></span>
<span class="line"><span style="color:#88846F">    // repeat</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    ui va, vb, vaa, vbb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (t</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> m;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F8F8F2">        va.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        vb.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        sa </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; sb </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F8F8F2">            sa </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F8F8F2">            va.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(a);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (m</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> b;</span></span>
<span class="line"><span style="color:#F8F8F2">            sb </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> b;</span></span>
<span class="line"><span style="color:#F8F8F2">            vb.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(b);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (sb </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> sa) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "NO</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (vb.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F8F8F2"> va.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">vb.</span><span style="color:#A6E22E">rbegin</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">>=</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">va.</span><span style="color:#A6E22E">rbegin</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#88846F">            // erase elements</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : va) &#123;</span></span>
<span class="line"><span style="color:#88846F">                // add abs(vb.count(x) - va.count(x));</span></span>
<span class="line"><span style="color:#88846F">                // to vaa and vbb depending on direction;</span></span>
<span class="line"><span style="color:#88846F">                // skip over elements already added</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">                int</span><span style="color:#F8F8F2"> diff </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> vb.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x) </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> va.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">vbb.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x)) </span></span>
<span class="line"><span style="color:#F92672">                    while</span><span style="color:#F8F8F2"> (diff</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) vbb.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F92672">                else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">vaa.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x))</span></span>
<span class="line"><span style="color:#F92672">                    while</span><span style="color:#F8F8F2"> (diff</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) vaa.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : vb) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">                int</span><span style="color:#F8F8F2"> diff </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> vb.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x) </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> va.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">vbb.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x)) </span></span>
<span class="line"><span style="color:#F92672">                    while</span><span style="color:#F8F8F2"> (diff</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) vbb.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F92672">                else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">vaa.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(x))</span></span>
<span class="line"><span style="color:#F92672">                    while</span><span style="color:#F8F8F2"> (diff</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) vaa.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            va </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> vaa;</span></span>
<span class="line"><span style="color:#F8F8F2">            vb.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#88846F">            // break elements</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : vbb) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                vb.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x</span><span style="color:#F92672">/</span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">                vb.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x</span><span style="color:#F92672">/</span><span style="color:#AE81FF">2</span><span style="color:#F92672"> +</span><span style="color:#F8F8F2"> (x</span><span style="color:#F92672">%</span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">));</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            vaa.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">            vbb.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (vb.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> ||</span><span style="color:#F8F8F2"> va.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "NO</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "YES</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Pa=Object.freeze(Object.defineProperty({__proto__:null,default:ws,metadata:q},Symbol.toStringTag,{value:"Module"})),S={title:"coding-1",description:"Starting new series of posts. UVa 10978 write up.",date:"2024-12-26T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Ka,description:La,date:Na,tags:Qa,published:Za}=S;var Cs=e('<h2>new series!</h2> <p>I am planning to start a habit where I solve a competitive programming problem a day. Initially, I will start out with the curated problem from Prof. Halim’s excellent series of competitive programming books. After finishing the books, I will move onto the code forces gym or any interesting coding problems.</p> <p>The point of this series is to hopefully <strong>keep me accountable</strong> in this habit.</p> <h2>UVa 10978 — “Let’s Play Magic!”</h2> <p>This is quite a simple problem, we just need to add the string of the card <span class="math math-inline"><!></span> spaces after the point of consideration, skipping any spaces that already has cards in them.</p> <p>This problem took quite a while as I haven’t touch C++ in a while, and both me and my laptop seems to rusty. I had to figure out what was wrong with msys2 and after that have to reacquaint myself with C++ programming. Needless to say, it took me a while to find out that C++ <code>string</code> don’t play nicely with <code>scanf</code> and using <code>scanf</code> messes with the <code>cin &gt;&gt;</code> operations as <code>scanf</code> apparently keeps a buffer.</p> <p><strong>My final solution:</strong></p> <!>',1);function ks(l){var s=Cs(),a=n(F(s),8),o=n(c(a)),m=c(o);p(m,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>'),r(o),u(),r(a);var y=n(a,6);p(y,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> N, n;</span></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (</span><span style="color:#AE81FF">true</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> N;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (cin.</span><span style="color:#A6E22E">fail</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">||</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">N) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        n </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> N;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F8F8F2">        string ret[N];</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F8F8F2">        string a, b;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> len, i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> b;</span></span>
<span class="line"><span style="color:#F8F8F2">            len </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> b.</span><span style="color:#A6E22E">length</span><span style="color:#F8F8F2">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">            while</span><span style="color:#F8F8F2"> (len) &#123;</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (ret[i] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> ""</span><span style="color:#F8F8F2">) len</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">>=</span><span style="color:#F8F8F2"> N) i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">            ret[(i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> +</span><span style="color:#F8F8F2"> N) </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> N] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> N; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> N) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> ret[i];</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> endl;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Ua=Object.freeze(Object.defineProperty({__proto__:null,default:ks,metadata:S},Symbol.toStringTag,{value:"Module"})),I={title:"coding-10",description:"Kattis - stockprices",date:"2025-01-06T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Ra,description:Va,date:Wa,tags:Ha,published:Ga}=I;var Bs=e("<h2>Kattis – stockprices</h2> <p>Pretty nice problem. I learned a few nice tricks with C++ like the following for a <code>minPQ</code></p> <!> <p>Furthermore, pairs use the second element as a tie-breaker, which took me a while to find out and cause several test cases to fail.</p> <h2>my solution</h2> <!>",1);function $s(l){var s=Bs(),a=n(F(s),4);p(a,()=>'<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F8F8F2">priority_queue</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">T,vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">T</span><span style="color:#F92672">></span><span style="color:#F8F8F2">,greater</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">T</span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> q;</span></span></code></pre>');var o=n(a,6);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> T, n, no_s, p, diff </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    char</span><span style="color:#F8F8F2"> op[</span><span style="color:#AE81FF">10</span><span style="color:#F8F8F2">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">T);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (T</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">        pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> a </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">&#125;, b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">        priority_queue</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> maxq;</span></span>
<span class="line"><span style="color:#88846F">        // very interesting how this works</span></span>
<span class="line"><span style="color:#F8F8F2">        priority_queue</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">, </span></span>
<span class="line"><span style="color:#F8F8F2">                vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2">, </span></span>
<span class="line"><span style="color:#F8F8F2">                greater</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>>></span><span style="color:#F8F8F2"> minq;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">            scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%s</span><span style="color:#AE81FF"> %d</span><span style="color:#AE81FF"> %*s</span><span style="color:#AE81FF"> %*s</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, op, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">no_s, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">p);</span></span>
<span class="line"><span style="color:#F8F8F2">            </span></span>
<span class="line"><span style="color:#88846F">            // these won't result in reference shenans</span></span>
<span class="line"><span style="color:#88846F">            // because the push operation copies the</span></span>
<span class="line"><span style="color:#88846F">            // object before inserting it into the pq</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'b'</span><span style="color:#F8F8F2">) maxq.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;p, no_s&#125;);</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 's'</span><span style="color:#F8F8F2">) minq.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;p, no_s&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">            // be careful cuz pairs use second element</span></span>
<span class="line"><span style="color:#88846F">            // to break ties</span></span>
<span class="line"><span style="color:#F92672">            while</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">minq.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">maxq.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> minq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> maxq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                a </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> minq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">                b </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> maxq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">                diff </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> b.second </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> a.second;</span></span>
<span class="line"><span style="color:#F8F8F2">                maxq.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">                minq.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) maxq.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;b.first, diff&#125;);</span></span>
<span class="line"><span style="color:#F92672">                else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (diff </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) minq.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;a.first, </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">diff&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (minq.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">()) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"- "</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74"> "</span><span style="color:#F8F8F2">, minq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first, minq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().second);</span></span>
<span class="line"><span style="color:#F8F8F2">            </span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (maxq.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">()) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"- "</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74"> "</span><span style="color:#F8F8F2">, maxq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first, maxq.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().second);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (a.first </span><span style="color:#F92672">==</span><span style="color:#F92672"> -</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"-</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, a.first);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Ya=Object.freeze(Object.defineProperty({__proto__:null,default:$s,metadata:I},Symbol.toStringTag,{value:"Module"})),M={title:"coding-11",description:"Kattis - quickbrownfox",date:"2025-01-07T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Ja,description:Xa,date:sn,tags:an,published:nn}=M;var js=e("<h2>Kattis – quickbrownfox</h2> <p>Direct Addressing Table (DAT) problem, which essentially means hashing problem but the hash function is the <em>identity</em>. Not too bad, got to use bitmasks again.</p> <p><code>LSOne</code> is an operation that gets the value of the least significant bit of <code>S</code>.</p> <p>Ran into a hitch because implemented <code>LSOne</code> wrongly. The correct function is:</p> <!> <p>Note that the <strong>negative sign is not the <code>~</code> (LOGICAL NOT) sign</strong></p> <h2>my solution</h2> <!>",1);function Ts(l){var s=js(),a=n(F(s),8);p(a,()=>'<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F8F8F2">T </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> (S </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">S)</span></span></code></pre>');var o=n(a,6);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">ignore</span><span style="color:#F8F8F2">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    string s;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    uint32_t</span><span style="color:#F8F8F2"> mask;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        getline</span><span style="color:#F8F8F2">(cin, s);</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> s.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">isalpha</span><span style="color:#F8F8F2">(s[i]))</span></span>
<span class="line"><span style="color:#F8F8F2">                s[j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> s[i];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> j; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            s[i] </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> tolower</span><span style="color:#F8F8F2">(s[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">            mask </span><span style="color:#F92672">|=</span><span style="color:#F8F8F2"> (</span><span style="color:#AE81FF">1</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> s[i] </span><span style="color:#F92672">-</span><span style="color:#E6DB74"> 'a'</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        mask </span><span style="color:#F92672">^=</span><span style="color:#F8F8F2"> (</span><span style="color:#AE81FF">1</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#AE81FF"> 26</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">mask) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "pangram</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "missing "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            while</span><span style="color:#F8F8F2"> (mask) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">                uint32_t</span><span style="color:#F8F8F2"> T </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> mask </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">mask;</span><span style="color:#88846F"> //LSOne</span></span>
<span class="line"><span style="color:#F8F8F2">                cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">char</span><span style="color:#F8F8F2">) (</span><span style="color:#E6DB74">'a'</span><span style="color:#F92672"> +</span><span style="color:#A6E22E"> __builtin_ctz</span><span style="color:#F8F8F2">(T));</span></span>
<span class="line"><span style="color:#F8F8F2">                mask </span><span style="color:#F92672">&#x26;=</span><span style="color:#F92672"> ~</span><span style="color:#F8F8F2">T;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const ln=Object.freeze(Object.defineProperty({__proto__:null,default:Ts,metadata:M},Symbol.toStringTag,{value:"Module"})),O={title:"coding-12",description:"Kattis - freefood",date:"2025-01-08T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:pn,description:on,date:en,tags:tn,published:Fn}=O;var qs=e('<h2>Kattis – freefood</h2> <p>This is a classic sweep-line problem, nevertheless, I still learned something out of it.</p> <ol><li>It is convenient to use <code>#define</code> for <code>minPQ</code>.</li></ol> <!> <ol start="2"><li>for range problems, double-counting can be eliminated by <strong>not including the end point</strong>. Now I understand why it is programming convention to exclude these endpoints.</li></ol> <h2>my solution</h2> <!>',1);function Ss(l){var s=qs(),a=n(F(s),6);p(a,()=>'<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> min_pq</span><span style="color:#F8F8F2"> priority_queue</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">,vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2">,greater</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>>></span></span></code></pre>');var o=n(a,6);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> min_pq</span><span style="color:#F8F8F2"> priority_queue</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">,vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2">,greater</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>>></span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, start, end;</span></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    bitset</span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF">101</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> mask;</span><span style="color:#88846F"> // mask</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> cnt </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, prev </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, curr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    min_pq startPQ;</span></span>
<span class="line"><span style="color:#F8F8F2">    min_pq endPQ;</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">start, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">end);</span></span>
<span class="line"><span style="color:#F8F8F2">        startPQ.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;start, i&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">        endPQ.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(&#123;end </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, i&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">endPQ.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#88846F">        // can't set curr to pair&#x3C;int, int> cuz funky pair comparison</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">startPQ.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> startPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> endPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first) </span></span>
<span class="line"><span style="color:#F8F8F2">            curr </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> startPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> curr </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> endPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().first;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">startPQ.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> startPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> endPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#88846F">            // jump to startPQ</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (mask.</span><span style="color:#A6E22E">any</span><span style="color:#F8F8F2">()) cnt </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> curr </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> prev;</span></span>
<span class="line"><span style="color:#F8F8F2">            mask[startPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().second] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            startPQ.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (startPQ.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">||</span><span style="color:#F8F8F2"> startPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> endPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (mask.</span><span style="color:#A6E22E">any</span><span style="color:#F8F8F2">()) cnt </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> curr </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> prev;</span></span>
<span class="line"><span style="color:#F8F8F2">            mask[endPQ.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">().second] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            endPQ.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        prev </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> curr;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, cnt);</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const cn=Object.freeze(Object.defineProperty({__proto__:null,default:Ss,metadata:O},Symbol.toStringTag,{value:"Module"})),z={title:"coding-13",description:"Kattis - shiritori",date:"2025-01-09T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:rn,description:yn,date:En,tags:dn,published:mn}=z;var Is=e("<h2>Kattis – shiritori</h2> <p>Quite a straight-forward problem. Normally, I would do another problem in this case, but today has been a slow day so maybe not.</p> <h2>solution</h2> <!>",1);function Ms(l){var s=Is(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    unordered_set</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    char</span><span style="color:#F8F8F2"> curr, prev;</span></span>
<span class="line"><span style="color:#F8F8F2">    string str;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> str;</span></span>
<span class="line"><span style="color:#F8F8F2">        curr </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">str.</span><span style="color:#A6E22E">begin</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">==</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) prev </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> curr;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (curr </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> prev </span><span style="color:#F92672">||</span><span style="color:#F8F8F2"> s.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(str)) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "Player "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">%</span><span style="color:#AE81FF"> 2</span><span style="color:#F92672"> +</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#E6DB74"> " lost</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        s.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(str);</span></span>
<span class="line"><span style="color:#F8F8F2">        prev </span><span style="color:#F92672">=</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">str.</span><span style="color:#A6E22E">rbegin</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "Fair Game</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const fn=Object.freeze(Object.defineProperty({__proto__:null,default:Ms,metadata:z},Symbol.toStringTag,{value:"Module"})),P={title:"coding-14",description:"Kattis - awkwardparty & Kattis - compoundwords",date:"2025-01-10T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:hn,description:un,date:gn,tags:An,published:xn}=P;var Os=e("<p>Today’s problems are a bit free, so I have decided to do 2 of them. They are: Kattis – awkwardparty and Kattis – compoundwords. The solution involves straightforward use of <code>unordered_map</code> and <code>set</code> (bBST) respectively.</p> <h2>my solution (awkwardparty)</h2> <!> <h2>my solution (compoundwords)</h2> <!>",1);function zs(l){var s=Os(),a=n(F(s),4);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, c, lvl;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    lvl </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    unordered_map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> m;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> c;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (m.</span><span style="color:#A6E22E">count</span><span style="color:#F8F8F2">(c)) lvl </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> min</span><span style="color:#F8F8F2">(lvl, i </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> m[c]);</span></span>
<span class="line"><span style="color:#F8F8F2">        m[c] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> lvl </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">    string w;</span></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> words;</span></span>
<span class="line"><span style="color:#F8F8F2">    set</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> w) words.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(w);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> words.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> words.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            w </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> words[i];</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> j) s.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(w.</span><span style="color:#A6E22E">append</span><span style="color:#F8F8F2">(words[j]));</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : s) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> x </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const bn=Object.freeze(Object.defineProperty({__proto__:null,default:zs,metadata:P},Symbol.toStringTag,{value:"Module"})),K={title:"coding-15",description:"Kattis - srednji",date:"2025-01-11T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Dn,description:_n,date:vn,tags:wn,published:Cn}=K;var Ps=e('<h2>Kattis – srednji</h2> <p>This is a pretty tough one for me. I wasn’t able to figure it out and had to consult a solution <a href="https://github.com/mpfeifer1/Kattis/blob/master/srednji.cpp" rel="nofollow">online</a>.</p> <p>I think I get how it works. We look left, counting the number of elements larger than <span class="math math-inline"><!></span>. When we look right, if there is that number of elements — say <span class="math math-inline"><!></span> — less than <span class="math math-inline"><!></span>, then all the left ranges + that right range forms a valid subset (where valid means it satisfies the problem conditions).</p> <p>The negative sign aggregation line</p> <!> <p>reflects that fact that we want to balance out the whatever number of elements larger than <span class="math math-inline"><!></span> on the other side.</p> <h2>my solution</h2> <!>',1);function Ks(l){var s=Ps(),a=n(F(s),4),o=n(c(a)),m=c(o);p(m,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>'),r(o);var y=n(o,2),f=c(y);p(f,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>'),r(y);var i=n(y,2),E=c(i);p(E,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>'),r(i),u(),r(a);var g=n(a,4);p(g,()=>'<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F8F8F2">ans </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> map[</span><span style="color:#F92672">-</span><span style="color:#F8F8F2">no_larger]</span></span></code></pre>');var h=n(g,2),d=n(c(h)),A=c(d);p(A,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>'),r(d),u(),r(h);var b=n(h,4);p(b,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, b, k;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> b;</span></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#A6E22E"> a</span><span style="color:#F8F8F2">(n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a[i];</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> b) k </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> m;</span></span>
<span class="line"><span style="color:#F8F8F2">    m[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // subset containing only itself</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> no_larger </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> k </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">>=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> b) no_larger</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> no_larger</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        m[no_larger]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> ans </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> m[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">];</span></span>
<span class="line"><span style="color:#F8F8F2">    no_larger </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> k </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> b) no_larger</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> no_larger</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        ans </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> m[</span><span style="color:#F92672">-</span><span style="color:#F8F8F2">no_larger];</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> ans </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const kn=Object.freeze(Object.defineProperty({__proto__:null,default:Ks,metadata:K},Symbol.toStringTag,{value:"Module"})),L={title:"coding-16",description:"Kattis - gcpc",date:"2025-01-12T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Bn,description:$n,date:jn,tags:Tn,published:qn}=L;var Ls=e("<h2>Kattis – gcpc</h2> <p>Completed today’s daily coding a bit later than the others, which can all be attributed to waking up late (right now is 9:11pm). This problem is really interesting because I got to used a cool trick from halim. That is <strong>policy-based data structures</strong>.</p> <p>Essentially, this gives me an STL-like tree that also implements fast <code>select</code> and <code>rank</code> operations, called an “ordered statistics tree” by Halim.</p> <p>An example (from Halim’s book):</p> <!> <h2>my solution</h2> <!>",1);function Ns(l){var s=Ls(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span><span style="color:#F8F8F2"> </span></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">; </span></span>
<span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/extc++.h></span><span style="color:#88846F"> // pbds </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">__gnu_pbds</span><span style="color:#F8F8F2">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> tree</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, null_type, less</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">,</span></span>
<span class="line"><span style="color:#F8F8F2">			rb_tree_tag, tree_order_statistics_node_update</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ost; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123; </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 9</span><span style="color:#F8F8F2">; </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> A[] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123; </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">4</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">7</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">10</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">15</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">23</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">50</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">65</span><span style="color:#F8F8F2">,</span><span style="color:#AE81FF">71</span><span style="color:#F8F8F2">&#125;; </span></span>
<span class="line"><span style="color:#88846F">	// as in Chapter 2 ost tree; </span></span>
<span class="line"><span style="color:#F92672">	for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; </span><span style="color:#F92672">++</span><span style="color:#F8F8F2">i)</span><span style="color:#88846F"> // O(n log n) </span></span>
<span class="line"><span style="color:#F8F8F2">		tree.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(A[i]);</span></span>
<span class="line"><span style="color:#88846F">	// O(log n) select</span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">tree.</span><span style="color:#A6E22E">find_by_order</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // 1-smallest = 2 </span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">tree.</span><span style="color:#A6E22E">find_by_order</span><span style="color:#F8F8F2">(n</span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // 9-smallest/largest = 71 </span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F92672"> *</span><span style="color:#F8F8F2">tree.</span><span style="color:#A6E22E">find_by_order</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">4</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // 5-smallest = 15 </span></span>
<span class="line"><span style="color:#F8F8F2">	</span></span>
<span class="line"><span style="color:#88846F">	// O(log n) rank </span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">order_of_key</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // index 0 (rank 1) </span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">order_of_key</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">71</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // index 8 (rank 9) </span></span>
<span class="line"><span style="color:#F8F8F2">	cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">order_of_key</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">15</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // index 4 (rank 5) </span></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; </span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/extc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">__gnu_pbds</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> tree</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">, null_type, greater</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2">, rb_tree_tag, </span></span>
<span class="line"><span style="color:#F8F8F2">            tree_order_statistics_node_update</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ost;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, m, i, b;</span></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">m);</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#F8F8F2">    ost tree;</span></span>
<span class="line"><span style="color:#F8F8F2">    unordered_map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> mp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        tree.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(&#123;&#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;, </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">i&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">        mp[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (m</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">i, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">b);</span></span>
<span class="line"><span style="color:#F8F8F2">        tree.</span><span style="color:#A6E22E">erase</span><span style="color:#F8F8F2">(&#123;mp[i], </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">i&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">        mp[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;mp[i].first </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, mp[i].second </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> b&#125;;</span></span>
<span class="line"><span style="color:#F8F8F2">        tree.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(&#123;mp[i], </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">i&#125;);</span></span>
<span class="line"><span style="color:#A6E22E">        printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, tree.</span><span style="color:#A6E22E">order_of_key</span><span style="color:#F8F8F2">(&#123;mp[</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">], </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">&#125;) </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Sn=Object.freeze(Object.defineProperty({__proto__:null,default:Ns,metadata:L},Symbol.toStringTag,{value:"Module"})),N={title:"coding-17",description:"Kattis - traveltheskies",date:"2025-01-14T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:In,description:Mn,date:On,tags:zn,published:Pn}=N;var Qs=e("<h2>Kattis – traveltheskies</h2> <p>The problem was not too bad, since the problem statement was quite verbose, I committed a few syntax errors and misinterpreted the problem slightly. I was actually supposed to do this problem yesterday, and I pretty much did but buggy.</p> <p>I fixed the bugs today. This also means I should be doing another problem for today, but I am lazy so maybe not.</p> <h2>my solution</h2> <!>",1);function Zs(l){var s=Qs(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">pair</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>>></span><span style="color:#F8F8F2"> G;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#88846F">    // vector of graphs, one for each day</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">    // if simulation survives, we can assume that all the past days were</span></span>
<span class="line"><span style="color:#88846F">    // optimal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> k, n, m, u, v, d, c, acc;</span></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">k, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">m);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">G</span><span style="color:#F92672">></span><span style="color:#A6E22E"> vg</span><span style="color:#F8F8F2">(n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (d </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; d </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; d</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) vg[d].</span><span style="color:#A6E22E">resize</span><span style="color:#F8F8F2">(k </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> m; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#AE81FF"> %d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">u, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">d, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">c);</span></span>
<span class="line"><span style="color:#F8F8F2">        d</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#88846F">        // u -> v</span></span>
<span class="line"><span style="color:#F8F8F2">        vg[d][u].</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(&#123;v, </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">c&#125;);</span></span>
<span class="line"><span style="color:#88846F">        // implies a v &#x3C;- u</span></span>
<span class="line"><span style="color:#88846F">        // push arrivals to the following day</span></span>
<span class="line"><span style="color:#88846F">        // as each passenger can only take one flight a day</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (d </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> &#x3C;</span><span style="color:#F8F8F2"> n) vg[d </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">][v].</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(&#123;u, c&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">d, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">c) </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> EOF) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        d</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        vg[d][v].</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(&#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">, c&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (d </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; d </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; d</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> k; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            acc </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> y : vg[d][i]) acc </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> y.second;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (acc </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">                printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"suboptimal</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">                return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (d </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> &#x3C;</span><span style="color:#F8F8F2"> n) &#123;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> k; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                acc </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : vg[d][i]) acc </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> x.second;</span></span>
<span class="line"><span style="color:#F8F8F2">                vg[d </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">][i].</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(&#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">, acc&#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"optimal</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Kn=Object.freeze(Object.defineProperty({__proto__:null,default:Zs,metadata:N},Symbol.toStringTag,{value:"Module"})),Q={title:"coding-18",description:"Kattis - almostunionfind",date:"2025-01-18T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Ln,description:Nn,date:Qn,tags:Zn,published:Un}=Q;var Us=e('<h2>Kattis – almostunionfind</h2> <p>This is a crazy problem, not because it is hard, but because it seemed that <strong>weighted quick-union w/ path compression</strong> is slower than <strong>quick-find w/ child set</strong>!!!!</p> <p>The gap between the last <code>daily-coding</code> was because I was moving back to Princeton after winter break and this problem completely stumped me, I was getting TLE with my <strong>weighted quick-union w/ path compression</strong> and I can’t figure out how to improve it further.</p> <p>My quick-find solution was <strong><em>heavily</em></strong> “inspired” by <code>mpfeifer1</code>’s <a href="https://github.com/mpfeifer1/Kattis/blob/master/almostunionfind.cpp" rel="nofollow">solution</a>.</p> <p>Though I still believe that a <strong>quick-union</strong> solution is possible given how the hint was phrased in <code>halim</code>. You can help me find the speed-up/mistake if you are so inclined. I have also left my TLE <strong>quick-union</strong> solution below.</p> <h2>my solution (quick-find)</h2> <!> <h2>my solution (quick-union)</h2> <!>',1);function Rs(l){var s=Us(),a=n(F(s),12);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> vi</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> vl</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">long</span><span style="color:#F92672">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, m, op, e1, e2, x, y;</span></span>
<span class="line"></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> m) &#123;</span></span>
<span class="line"><span style="color:#88846F">        // create almost-UF data structure of size n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">        // maintain the sz for weighted-UF for convenience</span></span>
<span class="line"><span style="color:#F8F8F2">        vi </span><span style="color:#A6E22E">p</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">        vl </span><span style="color:#A6E22E">sum</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#88846F">        // tracks the child elements of a parent</span></span>
<span class="line"><span style="color:#88846F">        // speeds up quick find</span></span>
<span class="line"><span style="color:#F8F8F2">        vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">set</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">>></span><span style="color:#A6E22E"> sets</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            p[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">            sum[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">            sets[i].</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(i);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (m</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">            switch</span><span style="color:#F8F8F2"> (op) &#123;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F8F8F2">                    </span></span>
<span class="line"><span style="color:#F8F8F2">                    e1 </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> p[e1];</span></span>
<span class="line"><span style="color:#F8F8F2">                    e2 </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> p[e2];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (e1 </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> e2) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (sets[e2].</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> sets[e1].</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">()) </span><span style="color:#A6E22E">swap</span><span style="color:#F8F8F2">(e1, e2);</span></span>
<span class="line"><span style="color:#88846F">                    // ensures sets[e1].size() &#x3C;= sets[e2].size()</span></span>
<span class="line"><span style="color:#F92672">                    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : sets[e1]) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                        sets[e2].</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(x);</span></span>
<span class="line"><span style="color:#F8F8F2">                        p[x] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F8F8F2">                    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    sets[e1].</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum[e2] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> sum[e1];</span></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">                    // move e1 to set containing e2</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F8F8F2">                    </span></span>
<span class="line"><span style="color:#F8F8F2">                    e2 </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> p[e2];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (e2 </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> p[e1]) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    sum[e2] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> e1;</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum[p[e1]] </span><span style="color:#F92672">-=</span><span style="color:#F8F8F2"> e1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    sets[p[e1]].</span><span style="color:#A6E22E">erase</span><span style="color:#F8F8F2">(e1);</span></span>
<span class="line"><span style="color:#F8F8F2">                    sets[e2].</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(e1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    p[e1] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1;</span></span>
<span class="line"><span style="color:#F8F8F2">                    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> sets[p[e1]].</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> sum[p[e1]] </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> vi</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> vl</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">long</span><span style="color:#F92672">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">vi</span><span style="color:#FD971F;font-style:italic"> p</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">vi</span><span style="color:#F92672">&#x26;</span><span style="color:#FD971F;font-style:italic"> next</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> curr </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> next[i];</span></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (p[curr] </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> curr) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        curr </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> p[curr];</span></span>
<span class="line"><span style="color:#F8F8F2">        p[curr] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> p[p[curr]];</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    next[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> curr;</span><span style="color:#88846F"> // cache the root</span></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#F8F8F2"> curr;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, m, op, e1, e2, x, y;</span></span>
<span class="line"></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> m) &#123;</span></span>
<span class="line"><span style="color:#88846F">        // create almost-UF data structure of size n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">        // maintain the sz for weighted-UF for convenience</span></span>
<span class="line"><span style="color:#F8F8F2">        vi </span><span style="color:#A6E22E">p</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">sz</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">next</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">        vl </span><span style="color:#A6E22E">sum</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            p[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">            next[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">            sum[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">            sz[i] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (m</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">            switch</span><span style="color:#F8F8F2"> (op) &#123;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F8F8F2">                    x </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(e1, p, next);</span></span>
<span class="line"><span style="color:#F8F8F2">                    y </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(e2, p, next);</span></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (x </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> y) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (sz[x] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> sz[y]) </span><span style="color:#A6E22E">swap</span><span style="color:#F8F8F2">(x, y);</span></span>
<span class="line"><span style="color:#88846F">                    // sz[x] &#x3C;= sz[y] is ensured</span></span>
<span class="line"><span style="color:#F8F8F2">                    p[x] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> y;</span></span>
<span class="line"><span style="color:#F8F8F2">                    next[e1] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> y;</span><span style="color:#88846F"> // shortcut to root -> path-compression</span></span>
<span class="line"><span style="color:#F8F8F2">                    sz[y] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> sz[x];</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum[y] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> sum[x];</span></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F8F8F2">                    x </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(e1, p, next);</span></span>
<span class="line"><span style="color:#F8F8F2">                    y </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(e2, p, next);</span></span>
<span class="line"><span style="color:#F92672">                    if</span><span style="color:#F8F8F2"> (x </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> y) </span><span style="color:#F92672">break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">                    // adjust shortcut to point to other tree</span></span>
<span class="line"><span style="color:#88846F">                    // maintains parent structure</span></span>
<span class="line"><span style="color:#F8F8F2">                    next[e1] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    sz[x]</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span><span style="color:#88846F"> // remove i, so one less</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum[x] </span><span style="color:#F92672">-=</span><span style="color:#F8F8F2"> e1;</span><span style="color:#88846F"> // remove i from sum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">                    sz[y]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum[y] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> e1;</span></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                case</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1;</span></span>
<span class="line"><span style="color:#F8F8F2">                    e2 </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> findRoot</span><span style="color:#F8F8F2">(e1, p, next);</span></span>
<span class="line"><span style="color:#F8F8F2">                    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> sz[e2] </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> sum[e2] </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                    break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                default</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F92672">                    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Rn=Object.freeze(Object.defineProperty({__proto__:null,default:Rs,metadata:Q},Symbol.toStringTag,{value:"Module"})),Z={title:"coding-19",description:"kattis - fenwick",date:"2025-01-19T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Vn,description:Wn,date:Hn,tags:Gn,published:Yn}=Z;var Vs=e('<h1>Kattis – fenwick</h1> <p>Today’s problem is quite exciting because I get to learn a new, cool data structure: <strong>the Fenwick (BIT) tree</strong>. Since its a new data structure, I have only done the <em>Entry Level</em> problem from <code>halim</code>.</p> <h1>Fenwick Tree</h1> <p>This structure is used for fast <span class="math math-inline"><!></span> <strong>dynamic</strong> prefix sum queries, where <span class="math math-inline"><!></span> is the length of the underlying array. In problem solving, the underlying array is frequently a frequency array.</p> <p>It makes frequent use of the <code>LSOne</code> operation (see <a href="/posts/coding-11">coding-11</a>).</p> <h2>structure</h2> <p>The Fenwick tree is essentially a tree whose parents and children are linked together by the <code>LSOne(S)</code> operation. This relationship is special because each branch of the Fenwick tree will cover the full range from <code>[1...i]</code> where <code>i</code> is the index of the <em>last node</em>. With each node in the Fenwick Tree being itself the cumulative frequency of the underlying array <code>f</code> till the index of its parent.</p> <p>Here the <em>last node</em> is the index with only one 1 in its binary representation. To borrow a diagram from <code>halim</code>, the structure of the Fenwick tree is as such:</p> <p><img src="/images/fenwick.png" alt="amongus"/></p> <h2>basic operations</h2> <p>The Fenwick Tree supports 2 basic operations:</p> <ul><li><code>update(i, v)</code>: update element <code>i</code> in <strong>underlying array</strong> with <code>v</code> (i.e. <code>a[i] += v</code>)</li> <li><code>rsq(j)</code>: find the prefix sum in range <code>[1...j]</code> <ul><li>this operation gives the range <code>[i...j]</code> trivially, i.e. <code>rsq(i,j) = rsq(j) - rsq(i-1)</code></li></ul></li></ul> <h2>implementation</h2> <p>The bare-bones implementation of the Fenwick Tree is quite simple and easy to remember:</p> <!> <h2>expansions</h2> <p>There are many expansions to the Fenwick Tree to optimize other common operations. I plan to explore those in the next few <code>daily-coding</code>s.</p> <h1>my solution (to Kattis – fenwick)</h1> <!>',1);function Ws(l){var s=Vs(),a=n(F(s),6),o=n(c(a)),m=c(o);p(m,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m\\log m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>'),r(o);var y=n(o,4),f=c(y);p(f,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>'),r(y),u(),r(a);var i=n(a,22);p(i,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(</span><span style="color:#FD971F;font-style:italic">S</span><span style="color:#F8F8F2">) ((S) </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">(S))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">#typedef vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> vi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">fenwick_tree</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	private:</span></span>
<span class="line"><span style="color:#F8F8F2">		vi ft;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	public:</span></span>
<span class="line"><span style="color:#A6E22E">		fenwick_tree</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> m</span><span style="color:#F8F8F2">) &#123; ft.</span><span style="color:#A6E22E">assign</span><span style="color:#F8F8F2">(m </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); &#125;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">		void</span><span style="color:#A6E22E"> update</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">			for</span><span style="color:#F8F8F2"> (; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">) ft.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i </span><span style="color:#F92672">+=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(i))</span></span>
<span class="line"><span style="color:#F8F8F2">				ft[i] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> v;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">		int</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> j</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">			int</span><span style="color:#F8F8F2"> acc </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">			for</span><span style="color:#F8F8F2"> (; j </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">-=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(S)) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">				acc </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> ft[j];</span></span>
<span class="line"><span style="color:#F8F8F2">			&#125;</span></span>
<span class="line"><span style="color:#F92672">			return</span><span style="color:#F8F8F2"> acc;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">		int</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> j</span><span style="color:#F8F8F2">) &#123; </span><span style="color:#F92672">return</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(j) </span><span style="color:#F92672">-</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">); &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var E=n(i,8);p(E,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(</span><span style="color:#FD971F;font-style:italic">S</span><span style="color:#F8F8F2">) ((S) </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">(S))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">typedef</span><span style="color:#F8F8F2"> vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">long</span><span style="color:#66D9EF;font-style:italic"> long</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> vi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">FenwickTree</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    private:</span></span>
<span class="line"><span style="color:#F8F8F2">        vi ft;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    public:</span></span>
<span class="line"><span style="color:#A6E22E">        FenwickTree</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> m</span><span style="color:#F8F8F2">) &#123; ft.</span><span style="color:#A6E22E">assign</span><span style="color:#F8F8F2">(m </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        void</span><span style="color:#A6E22E"> update</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">) ft.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i </span><span style="color:#F92672">+=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(i))</span></span>
<span class="line"><span style="color:#F8F8F2">                ft[i] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> v;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#66D9EF;font-style:italic"> long</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">            long</span><span style="color:#66D9EF;font-style:italic"> long</span><span style="color:#F8F8F2"> acc </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2">(; i </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">-=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(i))</span></span>
<span class="line"><span style="color:#F8F8F2">                acc </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> ft[i];</span></span>
<span class="line"><span style="color:#F92672">            return</span><span style="color:#F8F8F2"> acc;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); cout.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> N, Q, i, e;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    char</span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> N </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> Q;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    FenwickTree </span><span style="color:#A6E22E">ft</span><span style="color:#F8F8F2">(N);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (Q</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">        switch</span><span style="color:#F8F8F2">(op) &#123;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#E6DB74"> '+'</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e;</span></span>
<span class="line"><span style="color:#F8F8F2">                ft.</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(i </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, e);</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#E6DB74"> '?'</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> i;</span></span>
<span class="line"><span style="color:#F8F8F2">                cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> ft.</span><span style="color:#A6E22E">rsq</span><span style="color:#F8F8F2">(i) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Jn=Object.freeze(Object.defineProperty({__proto__:null,default:Ws,metadata:Z},Symbol.toStringTag,{value:"Module"})),U={title:"coding-2",description:"Kattis - pivot",date:"2024-12-27T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Xn,description:sl,date:al,tags:nl,published:ll}=U;var Hs=e('<h2>Kattis – pivot</h2> <p>This one is not too bad either, we need to do two passes, one forwards and backwards. We also need to keep a set of candidate pivot elements. For the forward pass, we remove any elements that isn’t the largest so far from our set of candidates. We do something similar for the backwards pass, but in this case the smallest instead.</p> <p>We can use C++ <code>unordered_set</code> for <span class="math math-inline"><!></span> <code>insert</code> and <code>erase</code>, which allows our algorithm to run in <span class="math math-inline"><!></span> time.</p> <p><strong>My solution:</strong></p> <!>',1);function Gs(l){var s=Hs(),a=n(F(s),4),o=n(c(a),3),m=c(o);p(m,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>'),r(o);var y=n(o,6),f=c(y);p(f,()=>'<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>'),r(y),u(),r(a);var i=n(a,4);p(i,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> a[n];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    unordered_set</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">a[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">        s.</span><span style="color:#A6E22E">insert</span><span style="color:#F8F8F2">(a[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> largest </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> INT_MIN;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> largest) largest </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> a[i];</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> s.</span><span style="color:#A6E22E">erase</span><span style="color:#F8F8F2">(a[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> smallest </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> INT_MAX;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">>=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> smallest) smallest </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> a[i];</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> s.</span><span style="color:#A6E22E">erase</span><span style="color:#F8F8F2">(a[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, s.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const pl=Object.freeze(Object.defineProperty({__proto__:null,default:Gs,metadata:U},Symbol.toStringTag,{value:"Module"})),R={title:"coding-20",description:"Kattis - justforsidekicks",date:"2025-01-25T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:ol,description:el,date:tl,tags:Fl,published:cl}=R;var Ys=e('<p>Just took a break for a few days to focus on COS 217 placement test. I think it went quite well. Still waiting for results tho…</p> <h2><a href="https://open.kattis.com/problems/justforsidekicks" rel="nofollow">Kattis – justforsidekicks</a></h2> <p>Quite a simple problem but I brain-farted so it took me a while to actually figure out how to do it. Essentially keep 6 <a href="/posts/coding-19">Fenwick trees</a>, each tracking the cumulative frequency of one type of gem. Then keep another array <code>v[]</code> that keeps track of the value of each gem type.</p> <p>I definitely need more practice.</p> <h2>my solution</h2> <!>',1);function Js(l){var s=Ys(),a=n(F(s),10);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(</span><span style="color:#FD971F;font-style:italic">S</span><span style="color:#F8F8F2">) (S </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">S)</span></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> N_GEMS</span><span style="color:#AE81FF"> 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">fenwick</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    private:</span></span>
<span class="line"><span style="color:#F8F8F2">        vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ft;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    public:</span></span>
<span class="line"><span style="color:#A6E22E">        fenwick</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> m</span><span style="color:#F8F8F2">) &#123; ft.</span><span style="color:#A6E22E">assign</span><span style="color:#F8F8F2">(m </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        void</span><span style="color:#A6E22E"> update</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> ft.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i </span><span style="color:#F92672">+=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(i))</span></span>
<span class="line"><span style="color:#F8F8F2">                ft[i] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> v;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> j</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">            long</span><span style="color:#F8F8F2"> sum </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (; j </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">-=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(j))</span></span>
<span class="line"><span style="color:#F8F8F2">                sum </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> ft[j];</span></span>
<span class="line"><span style="color:#F92672">            return</span><span style="color:#F8F8F2"> sum;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#88846F">    // get frequency of each gem type</span></span>
<span class="line"><span style="color:#88846F">    // cummulative frequency of each gem type at each index</span></span>
<span class="line"><span style="color:#88846F">    // simple multiplication at op 3</span></span>
<span class="line"><span style="color:#88846F">    // simple changing of v at op 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">    // each fenwick counts cummulative up to that point</span></span>
<span class="line"><span style="color:#88846F">    // ofc there is mapping [1...n] -> [0...n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, q, op, e1, e2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> q;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#A6E22E"> v</span><span style="color:#F8F8F2">(N_GEMS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> v.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> v[i];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">char</span><span style="color:#F92672">></span><span style="color:#A6E22E"> c</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    fenwick </span><span style="color:#A6E22E">f1</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">f2</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">f3</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">f4</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">f5</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">), </span><span style="color:#A6E22E">f6</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">fenwick</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> trees </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;f1, f2, f3, f4, f5, f6&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)&#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> c[i];</span></span>
<span class="line"><span style="color:#F8F8F2">        c[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> c[i] </span><span style="color:#F92672">-</span><span style="color:#E6DB74"> '1'</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        trees[c[i]].</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(i, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (q</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e1 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">        switch</span><span style="color:#F8F8F2"> (op) &#123;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">                // replace gem @ e1 with e2 gem type</span></span>
<span class="line"><span style="color:#F8F8F2">                trees[c[e1]].</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(e1, </span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">                trees[</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">e2].</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(e1, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">                c[e1] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">                // change value of e1 gem to e2</span></span>
<span class="line"><span style="color:#F8F8F2">                v[</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">e1] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> e2;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;  </span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#AE81FF"> 3</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#88846F">                // range sum query [e1, e2]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">                long</span><span style="color:#F8F8F2"> sum </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> N_GEMS; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">                    sum </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> (trees[i].</span><span style="color:#A6E22E">rsq</span><span style="color:#F8F8F2">(e2) </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> trees[i].</span><span style="color:#A6E22E">rsq</span><span style="color:#F8F8F2">(e1 </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)) </span><span style="color:#F92672">*</span><span style="color:#F8F8F2"> v[i];</span></span>
<span class="line"><span style="color:#F8F8F2">                cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> sum </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const rl=Object.freeze(Object.defineProperty({__proto__:null,default:Js,metadata:R},Symbol.toStringTag,{value:"Module"})),V={title:"coding-21",description:"Kattis - supercomputer",date:"2025-01-26T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:yl,description:il,date:El,tags:dl,published:ml}=V;var Xs=e('<h2><a href="https://open.kattis.com/problems/supercomputer" rel="nofollow">Kattis – supercomputer</a></h2> <p>Quite a straight-forward application of <a href="/posts/coding-19">Fenwick trees</a>.</p> <h2>my solution</h2> <!>',1);function sa(l){var s=Xs(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">#define</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(</span><span style="color:#FD971F;font-style:italic">S</span><span style="color:#F8F8F2">) (S </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">S)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline">fenwick</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    private:</span></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ft;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    public:</span></span>
<span class="line"><span style="color:#A6E22E">    fenwick</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> m</span><span style="color:#F8F8F2">) &#123; ft.</span><span style="color:#A6E22E">assign</span><span style="color:#F8F8F2">(m </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">); &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    void</span><span style="color:#A6E22E"> update</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> i</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> v</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> ft.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">(); i </span><span style="color:#F92672">+=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(i))</span></span>
<span class="line"><span style="color:#F8F8F2">            ft[i] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> v;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    long</span><span style="color:#A6E22E"> rsq</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> j</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#F8F8F2"> sum </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (; j </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">-=</span><span style="color:#A6E22E"> LSOne</span><span style="color:#F8F8F2">(j))</span></span>
<span class="line"><span style="color:#F8F8F2">            sum </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> ft[j];</span></span>
<span class="line"><span style="color:#F92672">        return</span><span style="color:#F8F8F2"> sum;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, k, u, v;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> k;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    fenwick </span><span style="color:#A6E22E">tree</span><span style="color:#F8F8F2">(n);</span></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">bool</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> vec;</span></span>
<span class="line"><span style="color:#F8F8F2">    vec.</span><span style="color:#A6E22E">assign</span><span style="color:#F8F8F2">(n </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    char</span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (k</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">        switch</span><span style="color:#F8F8F2"> (op) &#123;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#E6DB74"> 'F'</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> u;</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (vec[u]) tree.</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(u, </span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">                else</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">update</span><span style="color:#F8F8F2">(u, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">                vec[u] </span><span style="color:#F92672">=</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">vec[u];</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            case</span><span style="color:#E6DB74"> 'C'</span><span style="color:#F8F8F2">:</span></span>
<span class="line"><span style="color:#F8F8F2">                cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> u </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> v;</span></span>
<span class="line"><span style="color:#F8F8F2">                cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">rsq</span><span style="color:#F8F8F2">(v) </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> tree.</span><span style="color:#A6E22E">rsq</span><span style="color:#F8F8F2">(u </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const fl=Object.freeze(Object.defineProperty({__proto__:null,default:sa,metadata:V},Symbol.toStringTag,{value:"Module"})),W={title:"coding-22",description:"Kattis - jollyjumpers & UVa - poleposition",date:"2025-06-21T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:hl,description:ul,date:gl,tags:Al,published:xl}=W;var aa=e("<p>Done two problems today, quite slow, but hopefully things will speed up eventually.</p> <h1>Kattis – jollyjumpers</h1> <p>Iteration and take diff, quite simple, took a while cuz I forgot C++ syntax.</p> <h1>UVa – poleposition</h1> <p>Rank counting problem, wasn’t able to see the key at first, had to look at solutions.</p> <h1>my solution (jolly)</h1> <!> <h2>my solution (poleposition)</h2> <!>",1);function na(l){var s=aa(),a=n(F(s),12);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    bool</span><span style="color:#F8F8F2"> flag;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2">(</span><span style="color:#A6E22E">scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n) </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> EOF) &#123;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (n </span><span style="color:#F92672">&#x3C;=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">            printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"Jolly</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#A6E22E">            scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"><span style="color:#F92672">            continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> a[n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> v, u;</span></span>
<span class="line"><span style="color:#F8F8F2">        flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#A6E22E">        scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v);</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">            scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">u);</span></span>
<span class="line"><span style="color:#F8F8F2">            v </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> abs</span><span style="color:#F8F8F2">(v </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> u);</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (v </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 1</span><span style="color:#F92672"> ||</span><span style="color:#F8F8F2"> v </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)&#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            a[v </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            v </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> u;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (a[i] </span><span style="color:#F92672">!=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                flag </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">                break</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (flag) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"Not jolly</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"Jolly</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">	</span></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n) </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> EOF </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> n) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">		int</span><span style="color:#F8F8F2"> rank[</span><span style="color:#AE81FF">10005</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;, err </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, v, u;</span></span>
<span class="line"><span style="color:#F92672">		for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">			scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">u);</span></span>
<span class="line"><span style="color:#88846F">			// check out of range</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> u </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) err </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> u </span><span style="color:#F92672">>=</span><span style="color:#F8F8F2"> n) err </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#88846F">			// check collision</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (</span><span style="color:#F92672">!</span><span style="color:#F8F8F2">err </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F8F8F2"> rank[i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> u]) err </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; </span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (err) </span><span style="color:#F92672">continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">			rank[i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> u] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> v; </span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#F92672">		if</span><span style="color:#F8F8F2"> (err) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">			puts</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"-1"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">			continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#A6E22E">		printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, rank[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">]);</span></span>
<span class="line"><span style="color:#F92672">		for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#A6E22E">			printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">" </span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, rank[i]);</span></span>
<span class="line"><span style="color:#A6E22E">		puts</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">""</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const bl=Object.freeze(Object.defineProperty({__proto__:null,default:na,metadata:W},Symbol.toStringTag,{value:"Module"})),H={title:"coding-23",description:"UVa - armybuddies",date:"2025-06-22T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Dl,description:_l,date:vl,tags:wl,published:Cl}=H;var la=e('<h1>UVa – armybuddies</h1> <p>Two book-keeping arrays for whose to the left and right. Initially used linear scans, got idea from viewing <a href="https://github.com/ackoroa/UVa-Solutions/blob/master/UVa%2012356%20-%20Army%20Buddies/src/UVa%2012356%20-%20Army%20Buddies.cpp" rel="nofollow">ackoroa</a>’s solution.</p> <h1>my solution</h1> <!>',1);function pa(l){var s=la(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> s, b, left[</span><span style="color:#AE81FF">100005</span><span style="color:#F8F8F2">], right[</span><span style="color:#AE81FF">100005</span><span style="color:#F8F8F2">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2">(</span><span style="color:#A6E22E">scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">s, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">b), s </span><span style="color:#F92672">||</span><span style="color:#F8F8F2"> b) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">		int</span><span style="color:#F8F8F2"> dead[s] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;&#125;, l, r;</span></span>
<span class="line"><span style="color:#F92672">		for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> s; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">			left[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">			right[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">		while</span><span style="color:#F8F8F2"> (b</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">			scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">l, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">r);		</span></span>
<span class="line"><span style="color:#F8F8F2">			left[right[r]] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> left[l];</span></span>
<span class="line"><span style="color:#F8F8F2">			right[left[l]] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> right[r];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (left[l] </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"*"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">			else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, left[l]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (right[r] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> s) </span><span style="color:#A6E22E">printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">" *</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F92672">			else</span><span style="color:#A6E22E"> printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">" </span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, right[r]);</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#A6E22E">		puts</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"-"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const kl=Object.freeze(Object.defineProperty({__proto__:null,default:pa,metadata:H},Symbol.toStringTag,{value:"Module"})),G={title:"coding-24",description:"UVa - sleepinginhostels",date:"2025-06-23T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Bl,description:$l,date:jl,tags:Tl,published:ql}=G;var oa=e("<h1>UVa – sleepinginhostels</h1> <p>Quite a straightforward problem, compare spaces in between versus spaces at the edges, issue was just chasing down the corner cases.</p> <h1>my solution</h1> <!>",1);function ea(l){var s=oa(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">	string beds;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> champ, curr, left;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	bool</span><span style="color:#F8F8F2"> first;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E">getline</span><span style="color:#F8F8F2">(cin, beds)) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">		first </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> true</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		champ </span><span style="color:#F92672">=</span><span style="color:#F92672"> -</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		curr </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">		for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> beds.</span><span style="color:#A6E22E">length</span><span style="color:#F8F8F2">(); i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">			if</span><span style="color:#F8F8F2"> (beds[i] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> '.'</span><span style="color:#F8F8F2">) curr</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">			else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (beds[i] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'X'</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">				if</span><span style="color:#F8F8F2"> (first) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">					first </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">					left </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> curr;	</span></span>
<span class="line"><span style="color:#F8F8F2">				&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">				champ </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(champ, curr);</span></span>
<span class="line"><span style="color:#F8F8F2">				curr </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">			&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">		&#125;</span></span>
<span class="line"><span style="color:#F8F8F2">		champ </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> (champ </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)</span><span style="color:#F92672">/</span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		left </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(left, curr) </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">		if</span><span style="color:#F8F8F2"> (left </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> champ)</span></span>
<span class="line"><span style="color:#A6E22E">			printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, champ);</span></span>
<span class="line"><span style="color:#F92672">		else</span></span>
<span class="line"><span style="color:#A6E22E">			printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, left);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Sl=Object.freeze(Object.defineProperty({__proto__:null,default:ea,metadata:G},Symbol.toStringTag,{value:"Module"})),Y={title:"coding-25",description:"Kattis - baloni + Kattis - downtime",date:"2025-06-24T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Il,description:Ml,date:Ol,tags:zl,published:Pl}=Y;var ta=e("<h1>Kattis – baloni</h1> <p>Quite a clever use of a histogram array indeed. Essentially, each lower balloons removes a previous upper baloon.</p> <h1>Kattis – downtime</h1> <p>Sliding window idea, find the bottleneck and that will inform minimum number of servers needed. Had a bug regarding closing times of windows. I think my fix was quite elegant.</p> <h1>my solution (baloni)</h1> <!> <h1>my solution (downtime)</h1> <!>",1);function Fa(l){var s=ta(),a=n(F(s),10);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> n, curr, champ </span><span style="color:#F92672">=</span><span style="color:#F92672"> -</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">, arrows </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">	vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> arr;</span></span>
<span class="line"><span style="color:#F8F8F2">	arr.</span><span style="color:#A6E22E">resize</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">10000001</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">		scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">curr);</span></span>
<span class="line"><span style="color:#F92672">		if</span><span style="color:#F8F8F2"> (arr[curr </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) arr[curr </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">-=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		arr[curr] </span><span style="color:#F92672">+=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		champ </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(champ, curr);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> champ </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">		arrows </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> arr[i];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, arrows);	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> n, k, v, processing </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, champ </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#A6E22E">	scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#AE81FF"> %d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">k);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">	map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> m;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">		scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v);</span></span>
<span class="line"><span style="color:#F8F8F2">		m[v]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">		m[v </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1000</span><span style="color:#F8F8F2">]</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : m) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">		processing </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> x.second;		</span></span>
<span class="line"><span style="color:#F8F8F2">		champ </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(champ, processing);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, (champ </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> k </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)</span><span style="color:#F92672">/</span><span style="color:#F8F8F2">k);</span></span>
<span class="line"><span style="color:#F8F8F2">	</span></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Kl=Object.freeze(Object.defineProperty({__proto__:null,default:Fa,metadata:Y},Symbol.toStringTag,{value:"Module"})),J={title:"coding-26",description:"kattis - greedilyincreasingsequence",date:"2025-06-25T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Ll,description:Nl,date:Ql,tags:Zl,published:Ul}=J;var ca=e("<h1>Kattis – greedilyincreasingsequence</h1> <p>Chill problem</p> <h1>my solution</h1> <!>",1);function ra(l){var s=ca(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">	int</span><span style="color:#F8F8F2"> n, v;</span></span>
<span class="line"><span style="color:#F8F8F2">	vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> arr;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">n);</span></span>
<span class="line"><span style="color:#A6E22E">	scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v);</span></span>
<span class="line"><span style="color:#F8F8F2">	arr.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(v);</span></span>
<span class="line"><span style="color:#F92672">	for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">		scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">v);</span></span>
<span class="line"><span style="color:#F92672">		if</span><span style="color:#F8F8F2"> (v </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> arr.</span><span style="color:#A6E22E">back</span><span style="color:#F8F8F2">())</span></span>
<span class="line"><span style="color:#F8F8F2">			arr.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(v);</span></span>
<span class="line"><span style="color:#F8F8F2">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, arr.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : arr)</span></span>
<span class="line"><span style="color:#A6E22E">		printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%d</span><span style="color:#E6DB74"> "</span><span style="color:#F8F8F2">, x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">	puts</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">""</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">	return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Rl=Object.freeze(Object.defineProperty({__proto__:null,default:ra,metadata:J},Symbol.toStringTag,{value:"Module"})),X={title:"coding-3",description:"Kattis - rings2",date:"2024-12-29T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Vl,description:Wl,date:Hl,tags:Gl,published:Yl}=X;var ya=e("<h2>Kattis – rings2</h2> <p>Quite a tricky problem, I wasn’t used to 2D arrays so it took a while heckling with the <code>C++</code>syntax. Additionally, I also wasn’t used to algorithms whose running time depends on the number of rings 😅 (I just automatically discounted that as inefficient), perhaps there is a better algorithms.</p> <p>I also missed yesterday :((.</p> <p>In any case, <strong>my solution is:</strong></p> <!>",1);function ia(l){var s=ya(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> rows, cols;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">    scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">%u</span><span style="color:#AE81FF"> %u</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">rows, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">cols);</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> grid[rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">][cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        grid[i][</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        grid[i][cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        grid[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">][j] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        grid[rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">][j] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> false</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">            char</span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#A6E22E">            scanf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">" </span><span style="color:#AE81FF">%c</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">, </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2">a);</span></span>
<span class="line"><span style="color:#F8F8F2">            grid[i][j] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> (a </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'T'</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">    // Idea: scan through whole thing, everything is 1 initially</span></span>
<span class="line"><span style="color:#88846F">    // Anything not touching edge becomes 2</span></span>
<span class="line"><span style="color:#88846F">    // Anything not touching one becomes 3 and so on</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> count, nb </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    do</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        count </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">                bool</span><span style="color:#F8F8F2"> neihbouring </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> grid[i][j </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> nb </span></span>
<span class="line"><span style="color:#F92672">	                ||</span><span style="color:#F8F8F2"> grid[i][j </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> nb </span></span>
<span class="line"><span style="color:#F92672">	                ||</span><span style="color:#F8F8F2"> grid[i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">][j] </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> nb </span></span>
<span class="line"><span style="color:#F92672">	                ||</span><span style="color:#F8F8F2"> grid[i </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">][j] </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> nb;</span></span>
<span class="line"><span style="color:#F92672">                if</span><span style="color:#F8F8F2"> (grid[i][j] </span><span style="color:#F92672">&#x26;&#x26;</span><span style="color:#F92672"> !</span><span style="color:#F8F8F2">neihbouring) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                    grid[i][j] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> nb </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                    count </span><span style="color:#F92672">+=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        nb </span><span style="color:#F92672">+=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125; </span><span style="color:#F92672">while</span><span style="color:#F8F8F2"> (count </span><span style="color:#F92672">></span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    bool</span><span style="color:#F8F8F2"> twos </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> nb </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 10</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> rows </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> cols </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            string to_print </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> grid[i][j] </span><span style="color:#F92672">?</span><span style="color:#A6E22E"> to_string</span><span style="color:#F8F8F2">(grid[i][j]) </span><span style="color:#F92672">:</span><span style="color:#E6DB74"> ""</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (twos) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#A6E22E"> setw</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> right </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#A6E22E"> setfill</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">'.'</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> to_print;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F8F8F2"> cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#A6E22E"> setw</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">3</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> right </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#A6E22E"> setfill</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">'.'</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> to_print;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#A6E22E">        printf</span><span style="color:#F8F8F2">(</span><span style="color:#E6DB74">"</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Jl=Object.freeze(Object.defineProperty({__proto__:null,default:ia,metadata:X},Symbol.toStringTag,{value:"Module"})),ss={title:"coding-4",description:"Kattis - musicyourway",date:"2024-12-31T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Xl,description:sp,date:ap,tags:np,published:lp}=ss;var Ea=e("<h2>Kattis – musicyourway</h2> <p>Not too bad, I learned a bit more about string processing in C++.</p> <p>On another note, I really need to stick to the “daily” commitment otherwise this will become “every-other-day-coding” instead, which sounds a lot more cumbersome.</p> <p><strong>My solution:</strong></p> <!>",1);function da(l){var s=Ea(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">bool</span><span style="color:#A6E22E"> cmp</span><span style="color:#F8F8F2"> (</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#A6E22E;text-decoration:underline">string</span><span style="color:#F8F8F2">> </span><span style="color:#FD971F;font-style:italic">a</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#A6E22E;text-decoration:underline">string</span><span style="color:#F8F8F2">> </span><span style="color:#FD971F;font-style:italic">b</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> dim</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#F8F8F2"> a[dim] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> b[dim];</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">    string s;</span></span>
<span class="line"><span style="color:#A6E22E">    getline</span><span style="color:#F8F8F2">(cin, s);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    istringstream </span><span style="color:#A6E22E">ss</span><span style="color:#F8F8F2">(s);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    map</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> map;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    string word;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (ss </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> word)</span></span>
<span class="line"><span style="color:#F8F8F2">        map[word] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">ignore</span><span style="color:#F8F8F2">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string</span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> songs;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    string s2;</span></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        getline</span><span style="color:#F8F8F2">(cin, s2);</span></span>
<span class="line"><span style="color:#F8F8F2">        stringstream </span><span style="color:#A6E22E">ss2</span><span style="color:#F8F8F2">(s2);</span></span>
<span class="line"><span style="color:#F8F8F2">        vector</span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2">string</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> song;</span></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (ss2 </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> word) song.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(word);</span></span>
<span class="line"><span style="color:#F8F8F2">        songs.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(song);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> cat[n];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> word; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) cat[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> map[word];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> x : cat) &#123;</span></span>
<span class="line"><span style="color:#A6E22E">        stable_sort</span><span style="color:#F8F8F2">(songs.</span><span style="color:#A6E22E">begin</span><span style="color:#F8F8F2">(), songs.</span><span style="color:#A6E22E">end</span><span style="color:#F8F8F2">(), </span></span>
<span class="line"><span style="color:#F8F8F2">            [</span><span style="color:#FD971F;font-style:italic">x</span><span style="color:#F8F8F2">](</span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#A6E22E;text-decoration:underline">string</span><span style="color:#F8F8F2">> </span><span style="color:#FD971F;font-style:italic">a</span><span style="color:#F8F8F2">, </span><span style="color:#A6E22E;text-decoration:underline">vector</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#A6E22E;text-decoration:underline">string</span><span style="color:#F8F8F2">> </span><span style="color:#FD971F;font-style:italic">b</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">                return</span><span style="color:#F8F8F2"> a[x] </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> b[x];</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;);</span></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> s </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> y: songs) &#123;</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">auto</span><span style="color:#F8F8F2"> z : y) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> z </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const pp=Object.freeze(Object.defineProperty({__proto__:null,default:da,metadata:ss},Symbol.toStringTag,{value:"Module"})),as={title:"coding-5",description:"Kattis - mali",date:"2025-01-01T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:op,description:ep,date:tp,tags:Fp,published:cp}=as;var ma=e("<h2>Kattis – mali</h2> <p>The basic algorithm is easy to spot, the hard part is figuring out a way to get it under the time limit. We just need to exploit the fact that the numbers given is under 100.</p> <p>What’s weird however, is that the bookkeeping for <code>tempA</code> and <code>tempB</code> (zeroing) is needed for the solution to be correct? From my understanding, we never touch them again aside from the ones that doesn’t involve zeroing. Maybe it’s just some corner case.</p> <p><strong>My solution:</strong></p> <!>",1);function fa(l){var s=ma(),a=n(F(s),8);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">    // 101 so that no linear scan to find max elem</span></span>
<span class="line"><span style="color:#88846F">    // and 101 is quite small</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> freqA[</span><span style="color:#AE81FF">101</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;, freqB[</span><span style="color:#AE81FF">101</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> A, B;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> A </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> B;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">        freqA[A]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">        freqB[B]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> tempA[</span><span style="color:#AE81FF">101</span><span style="color:#F8F8F2">], tempB[</span><span style="color:#AE81FF">101</span><span style="color:#F8F8F2">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E">        copy</span><span style="color:#F8F8F2">(freqA, freqA </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 101</span><span style="color:#F8F8F2">, tempA);</span></span>
<span class="line"><span style="color:#A6E22E">        copy</span><span style="color:#F8F8F2">(freqB, freqB </span><span style="color:#F92672">+</span><span style="color:#AE81FF"> 101</span><span style="color:#F8F8F2">, tempB);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">, j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 100</span><span style="color:#F8F8F2">, maximal </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> INT_MIN;</span></span>
<span class="line"><span style="color:#F92672">        while</span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 101</span><span style="color:#F92672"> &#x26;&#x26;</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">>=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (tempA[i] </span><span style="color:#F92672">==</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (tempB[j] </span><span style="color:#F92672">==</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) j</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (tempA[i] </span><span style="color:#F92672">==</span><span style="color:#F8F8F2"> tempB[j]) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                maximal </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(maximal, i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> j);</span></span>
<span class="line"><span style="color:#F8F8F2">                tempA[i] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                tempB[j] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                j</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (tempA[i] </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> tempB[j]) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                maximal </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(maximal, i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> j);</span></span>
<span class="line"><span style="color:#F8F8F2">                tempA[i] </span><span style="color:#F92672">-=</span><span style="color:#F8F8F2"> tempB[j];</span></span>
<span class="line"><span style="color:#F8F8F2">                tempB[j] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                j</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (tempA[i] </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> tempB[j]) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                maximal </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(maximal, i </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> j);</span></span>
<span class="line"><span style="color:#F8F8F2">                tempB[j] </span><span style="color:#F92672">-=</span><span style="color:#F8F8F2"> tempA[i];</span></span>
<span class="line"><span style="color:#F8F8F2">                tempA[i] </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">                i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> maximal </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const rp=Object.freeze(Object.defineProperty({__proto__:null,default:fa,metadata:as},Symbol.toStringTag,{value:"Module"})),ns={title:"coding-6",description:"Kattis - magicsequence",date:"2025-01-02T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:yp,description:ip,date:Ep,tags:dp,published:mp}=ns;var ha=e('<h2>Kattis – magicsequence</h2> <p>This took an especially long time due to Kattis hiding its test cases. This lead me to implementing wrong fixes. For example, I thought I needed to use <code>BigInteger</code>, so I ended up reimplementing the entire thing in java only to realize that it was unnecessary. Nevertheless, I learned quite a lot from this problem.</p> <h3>radix sort</h3> <p>Counting sort but for each “digit”, in brackets because that depends on what base (or radix) is used. The formula for the <code>i</code>-th “digit” given a radix is quite simple:</p> <!> <p>After this, it is a matter of performing a <strong>stable</strong> counting sort on progressive more significant “digits”.</p> <h3>stable counting sort</h3> <p>I got this algorithm from Prof. Halim’s Competitive Programming I book. Essentially, it is counting sort with the following additions:</p> <ul><li>we convert the usual count array to a cumulative count.</li> <li>using this cumulative count, we can insert the elements from the original array in the sorted order, while still preserving relative ordering between elements.</li></ul> <h3>bit-wise shenanigans</h3> <p>With the two above methods, even with a carefully chosen radix (as hinted in Prof. Halim’s book), I still got TLE.</p> <p>After browsing the internet, I found a solution by <a href="https://github.com/reneargento/competitive-programming-4/blob/master/src/chapter2/section2/g/special/sorting/problems/MagicSequence.java" rel="nofollow">Rene Argento</a> that employed an interesting way speed up the “digit”-extraction operation through bit-wise operations. This is quite clever and it got me over the TLE.</p> <p>He also implemented an array swapping procedure to not have to create a new <code>temp</code> array per radix sort, which would speed things up further, but it was not necessary for me to clear the TLE.</p> <h2>my solution</h2> <!>',1);function ua(l){var s=ha(),a=n(F(s),8);p(a,()=>'<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F8F8F2">(number </span><span style="color:#F92672">/</span><span style="color:#F8F8F2"> radix</span><span style="color:#F92672">^</span><span style="color:#F8F8F2">i) </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> radix</span></span></code></pre>');var o=n(a,20);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> tc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> tc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (tc</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> n, a, b, c, x, y;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> a </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> b </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> c </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> x </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#F8F8F2"> s[n];</span></span>
<span class="line"><span style="color:#F8F8F2">        s[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#F8F8F2"> largest </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> a;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            s[i] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> (s[i</span><span style="color:#F92672">-</span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">*</span><span style="color:#F8F8F2"> b </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> a) </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> c;</span></span>
<span class="line"><span style="color:#F8F8F2">            largest </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> max</span><span style="color:#F8F8F2">(largest, s[i]);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> exp </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 15</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        int</span><span style="color:#F8F8F2"> radix </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 2</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> exp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">        // note the stable counting sort from halim</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">long</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; (</span><span style="color:#AE81FF">2</span><span style="color:#F92672">l</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> i) </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> largest; i </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> exp) &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">            int</span><span style="color:#F8F8F2"> count[radix] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">                count[(s[j] </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)) </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2"> (radix </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)]</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">            // computing the prefix sum</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> radix; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                count[j] </span><span style="color:#F92672">+=</span><span style="color:#F8F8F2"> count[j </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">];</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">            long</span><span style="color:#F8F8F2"> temp[n];</span></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">>=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">                temp[</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">count[(s[j] </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> (i </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)) </span><span style="color:#F92672">&#x26;</span><span style="color:#F8F8F2"> (radix </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">)]] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> s[j];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">            for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> j </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; j </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; j</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">                s[j] </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> temp[j];</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        long</span><span style="color:#F8F8F2"> v </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">long</span><span style="color:#F8F8F2"> r : s)</span></span>
<span class="line"><span style="color:#F8F8F2">            v </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> (v </span><span style="color:#F92672">*</span><span style="color:#F8F8F2"> x </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> r) </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> y;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> v </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const fp=Object.freeze(Object.defineProperty({__proto__:null,default:ua,metadata:ns},Symbol.toStringTag,{value:"Module"})),ls={title:"coding-7",description:"Kattis - snapperhard",date:"2025-01-03T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:hp,description:up,date:gp,tags:Ap,published:xp}=ls;var ga=e("<h2>Kattis – snapperhard</h2> <p>This was not too bad, it is a good refresher on bit manipulations. I might do more for practice in the subsequent days.</p> <p>The snaps function like additions. The configuration of the lamps is the binary representation of the number of snaps <code>K</code>.</p> <p>To figure out if a lamp connected to <code>N</code> is on, we just need to figure out if there is a contiguous sequence of 1s from LSB to N.</p> <h2>my solution</h2> <!>",1);function Aa(l){var s=ga(),a=n(F(s),10);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">// Since 1 &#x3C;= N &#x3C;= 30, we can use a 32-bit integer bitmask</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    uint32_t</span><span style="color:#F8F8F2"> T, N, K;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> T;</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;=</span><span style="color:#F8F8F2"> T; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> N </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> K;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">        // the bit representation of K will be the</span></span>
<span class="line"><span style="color:#88846F">        // final configuration of the snappers</span></span>
<span class="line"><span style="color:#88846F">        // after K snaps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F">        // ON if there is a contiguous block from</span></span>
<span class="line"><span style="color:#88846F">        // start to N</span></span>
<span class="line"><span style="color:#88846F">        // for this, we flip bits and use the LSOne operation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">        K </span><span style="color:#F92672">=</span><span style="color:#F92672"> ~</span><span style="color:#F8F8F2">K;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">        uint32_t</span><span style="color:#F8F8F2"> T </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> K </span><span style="color:#F92672">&#x26;</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">K;</span></span>
<span class="line"><span style="color:#F8F8F2">        bitset</span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF">32</span><span style="color:#F92672">></span><span style="color:#A6E22E"> t</span><span style="color:#F8F8F2">(T);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">        cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "Case #"</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> ": "</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (N </span><span style="color:#F92672">&#x3C;=</span><span style="color:#A6E22E"> __builtin_ctz</span><span style="color:#F8F8F2">(T)) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "ON</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "OFF</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const bp=Object.freeze(Object.defineProperty({__proto__:null,default:Aa,metadata:ls},Symbol.toStringTag,{value:"Module"})),ps={title:"coding-8",description:"Kattis - thrown",date:"2025-01-04T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Dp,description:_p,date:vp,tags:wp,published:Cp}=ps;var xa=e("<h2>Kattis – thrown</h2> <p>This one is quite a straight-forward stacks problem. An annoying hitch was not initializing <code>curr</code> properly, resulting correct answer no my laptop but wrong solutions on Kattis. Another hitch was not account for cases where the throw number <code>p</code> is negative AND whose absolute magnitude exceeds that of <code>n</code></p> <h2>my solution</h2> <!>",1);function ba(l){var s=xa(),a=n(F(s),6);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> do_throw</span><span style="color:#F8F8F2">(</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> n</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> curr</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#FD971F;font-style:italic"> op</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F92672">    if</span><span style="color:#F8F8F2"> (op </span><span style="color:#F92672">&#x3C;</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">) op </span><span style="color:#F92672">=</span><span style="color:#F92672"> -</span><span style="color:#F8F8F2">(</span><span style="color:#F92672">-</span><span style="color:#F8F8F2">op </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> n);</span></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#F8F8F2"> (curr </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> op </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> n) </span><span style="color:#F92672">%</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, k, op, curr </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> k;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    stack</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> ops;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (k</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (cin.</span><span style="color:#A6E22E">fail</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            cin.</span><span style="color:#A6E22E">clear</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">            cin.</span><span style="color:#A6E22E">ignore</span><span style="color:#F8F8F2">(</span><span style="color:#A6E22E;text-decoration:underline">numeric_limits</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#A6E22E;text-decoration:underline">streamsize</span><span style="color:#F8F8F2">>::</span><span style="color:#A6E22E">max</span><span style="color:#F8F8F2">(), </span><span style="color:#E6DB74">' '</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">            cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op;</span></span>
<span class="line"><span style="color:#F92672">            while</span><span style="color:#F8F8F2"> (op</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                curr </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> do_throw</span><span style="color:#F8F8F2">(n, curr, </span><span style="color:#F92672">-</span><span style="color:#F8F8F2">ops.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">());</span></span>
<span class="line"><span style="color:#F8F8F2">                ops.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            curr </span><span style="color:#F92672">=</span><span style="color:#A6E22E"> do_throw</span><span style="color:#F8F8F2">(n, curr, op);</span></span>
<span class="line"><span style="color:#F8F8F2">            ops.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(op);</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> curr </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const kp=Object.freeze(Object.defineProperty({__proto__:null,default:ba,metadata:ps},Symbol.toStringTag,{value:"Module"})),os={title:"coding-9",description:"Kattis - delimitersoup & Kattis - teque",date:"2025-01-05T00:00:00.000Z",tags:["daily-coding"],published:!0},{title:Bp,description:$p,date:jp,tags:Tp,published:qp}=os;var Da=e("<p>Since the problems today aren’t too hard, and I desperately want to move on to the next chapter, I have decided to do a 2-for-1 special for today.</p> <h2>Kattis - delimitersoup</h2> <p>Standard stack bracket matching problem, I used a map to match the different types of bracket for cleanliness.</p> <h2>Kattis - teque</h2> <p>A bit trickier, I used two deques to represent two halves of the array. I ran into quite a bit of trouble as I forgot to rebalance the deques after <code>push_front</code> or <code>push_back</code> only remembering to rebalance for <code>push_middle</code>. After figuring that out, I got the problem pretty quickly.</p> <h2>my solution (delimitersoup)</h2> <!> <h2>my solution (teque)</h2> <!>",1);function _a(l){var s=Da(),a=n(F(s),12);p(a,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    string str;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">ignore</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#A6E22E">    getline</span><span style="color:#F8F8F2">(cin, str);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    char</span><span style="color:#F8F8F2"> c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    stack</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">char</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    map</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">char</span><span style="color:#F8F8F2">, </span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> m </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">'('</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">'['</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">'&#123;'</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">3</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">')'</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">1</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">']'</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">2</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">        &#123;</span><span style="color:#E6DB74">'&#125;'</span><span style="color:#F8F8F2">, </span><span style="color:#AE81FF">3</span><span style="color:#F8F8F2">&#125;,</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">=</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">; i </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> n; i</span><span style="color:#F92672">++</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        c </span><span style="color:#F92672">=</span><span style="color:#F8F8F2"> str[i];</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (c </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> ' '</span><span style="color:#F8F8F2">) </span><span style="color:#F92672">continue</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (c </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> '('</span><span style="color:#F92672"> ||</span><span style="color:#F8F8F2"> c </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> '['</span><span style="color:#F92672"> ||</span><span style="color:#F8F8F2"> c </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> '&#123;'</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F8F8F2">            s.</span><span style="color:#A6E22E">push</span><span style="color:#F8F8F2">(c);</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F8F8F2"> &#123;</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (s.</span><span style="color:#A6E22E">empty</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">||</span><span style="color:#F8F8F2"> m[c] </span><span style="color:#F92672">!=</span><span style="color:#F8F8F2"> m[s.</span><span style="color:#A6E22E">top</span><span style="color:#F8F8F2">()]) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> c </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> " "</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> i </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> endl;</span></span>
<span class="line"><span style="color:#F92672">                return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">            s.</span><span style="color:#A6E22E">pop</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "ok so far"</span><span style="color:#F92672"> &#x3C;&#x3C;</span><span style="color:#F8F8F2"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`);var o=n(a,4);p(o,()=>`<pre class="shiki monokai" style="background-color:#272822;color:#F8F8F2" tabindex="0"><code><span class="line"><span style="color:#F92672">#include</span><span style="color:#E6DB74"> &#x3C;bits/stdc++.h></span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">using</span><span style="color:#66D9EF;font-style:italic"> namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline">std</span><span style="color:#F8F8F2">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#A6E22E"> main</span><span style="color:#F8F8F2">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline">ios</span><span style="color:#F8F8F2">::</span><span style="color:#A6E22E">sync_with_stdio</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"><span style="color:#F8F8F2">    cin.</span><span style="color:#A6E22E">tie</span><span style="color:#F8F8F2">(</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    deque</span><span style="color:#F92672">&#x3C;</span><span style="color:#66D9EF;font-style:italic">int</span><span style="color:#F92672">></span><span style="color:#F8F8F2"> a, b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic">    int</span><span style="color:#F8F8F2"> n, e;</span></span>
<span class="line"><span style="color:#F8F8F2">    cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2">    string op;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    while</span><span style="color:#F8F8F2"> (n</span><span style="color:#F92672">--</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">        cin </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> op </span><span style="color:#F92672">>></span><span style="color:#F8F8F2"> e;</span></span>
<span class="line"><span style="color:#F8F8F2">        </span></span>
<span class="line"><span style="color:#F92672">        if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">0</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'g'</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (e </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> a.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">()) cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> a[e] </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F8F8F2"> cout </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#F8F8F2"> b[e </span><span style="color:#F92672">-</span><span style="color:#F8F8F2"> a.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">()] </span><span style="color:#F92672">&#x3C;&#x3C;</span><span style="color:#E6DB74"> "</span><span style="color:#AE81FF">&#92;n</span><span style="color:#E6DB74">"</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">5</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'b'</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            b.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(e);</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (b.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">></span><span style="color:#F8F8F2"> a.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">()) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                a.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(b.</span><span style="color:#A6E22E">front</span><span style="color:#F8F8F2">());</span></span>
<span class="line"><span style="color:#F8F8F2">                b.</span><span style="color:#A6E22E">pop_front</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">5</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'f'</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">            a.</span><span style="color:#A6E22E">push_front</span><span style="color:#F8F8F2">(e);</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> (b.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">&#x3C;</span><span style="color:#F8F8F2"> a.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">-</span><span style="color:#AE81FF"> 1</span><span style="color:#F8F8F2">) &#123;</span></span>
<span class="line"><span style="color:#F8F8F2">                b.</span><span style="color:#A6E22E">push_front</span><span style="color:#F8F8F2">(a.</span><span style="color:#A6E22E">back</span><span style="color:#F8F8F2">());</span></span>
<span class="line"><span style="color:#F8F8F2">                a.</span><span style="color:#A6E22E">pop_back</span><span style="color:#F8F8F2">();</span></span>
<span class="line"><span style="color:#F8F8F2">            &#125;</span></span>
<span class="line"><span style="color:#F8F8F2">        &#125;</span></span>
<span class="line"><span style="color:#F92672">        else</span><span style="color:#F92672"> if</span><span style="color:#F8F8F2"> (op[</span><span style="color:#AE81FF">5</span><span style="color:#F8F8F2">] </span><span style="color:#F92672">==</span><span style="color:#E6DB74"> 'm'</span><span style="color:#F8F8F2">)</span></span>
<span class="line"><span style="color:#F92672">            if</span><span style="color:#F8F8F2"> ((a.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">() </span><span style="color:#F92672">+</span><span style="color:#F8F8F2"> b.</span><span style="color:#A6E22E">size</span><span style="color:#F8F8F2">()) </span><span style="color:#F92672">%</span><span style="color:#AE81FF"> 2</span><span style="color:#F8F8F2">) b.</span><span style="color:#A6E22E">push_front</span><span style="color:#F8F8F2">(e);</span></span>
<span class="line"><span style="color:#F92672">            else</span><span style="color:#F8F8F2"> a.</span><span style="color:#A6E22E">push_back</span><span style="color:#F8F8F2">(e);</span></span>
<span class="line"><span style="color:#F8F8F2">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672">    return</span><span style="color:#AE81FF"> 0</span><span style="color:#F8F8F2">;</span></span>
<span class="line"><span style="color:#F8F8F2">&#125;</span></span></code></pre>`),t(l,s)}const Sp=Object.freeze(Object.defineProperty({__proto__:null,default:_a,metadata:os},Symbol.toStringTag,{value:"Module"})),es={title:"MAT 217 winter notes!",description:`I read up the first 2 chapters of Axler's "Linear Algebra Done Right" in preparation to take MAT 217 in the spring.`,date:"2025-01-04T00:00:00.000Z",tags:["winter-notes","weekly-projects","math"],published:!0,image:"/thumbs/axler.png"},{title:Ip,description:Mp,date:Op,tags:zp,published:Pp,image:Kp}=es;var va=e('<h1>first installment!</h1> <p>Finally, the first installment of my <a href="/posts/new-blog!">quest to do a project a week</a>. During planning, I realized that I didn’t have nearly enough time in the winter to do all the things I wanted. So I resorted to doing one project per division (which I defined to be 3 days). At least that was the original plan.</p> <p>I initially planned to work through 5 chapters of Axler in 3 days which, needless to say, I didn’t not succeed. This was because of numerous outings, delays, over-estimation of my abilities, and laziness. Nevertheless, I was at least still able to finish 2 chapters in a week, which is faithful (somewhat) to the original goal of weekly projects, though a lot less impressive.</p> <p>I hope to speed things up from here on out. Fingers crossed 🤞.</p> <h1>winter notes</h1> <p>Anyways, I have prepared a few pages of “winter notes” summarizing what I have learnt from the book, as well as a few exercises that I thought were cool (I did do the rest, but just too lazy to type them all out).</p> <p>You can find my winter notes here:</p> <a href="/post_pdfs/MAT_217_winter_notes.pdf" target="_blank">MAT_217_winter_notes.pdf</a> <div><iframe src="/post_pdfs/MAT_217_winter_notes.pdf" title="PDF"></iframe></div>',1);function wa(l){var s=va();u(16),t(l,s)}const Lp=Object.freeze(Object.defineProperty({__proto__:null,default:wa,metadata:es},Symbol.toStringTag,{value:"Module"})),ts={published:!0,tags:["website-update"],date:"2024-12-26T00:00:00.000Z",description:"finally figured out how to set this up",title:"new blog!"},{published:Np,tags:Qp,date:Zp,description:Up,title:Rp}=ts;var Ca=e('<p>Welcome to my blog, finally figured out how to set it up statically so that I can host it for free on Github Pages.</p> <p>I plan to use this as a platform to catalog various projects that I will (hopefully) embark on in the near future.</p> <p>I’m thinking about doing <strong>a project a week</strong>, inspired by Carter Semrad on YouTube:</p> <div class="video-container"><iframe src="https://www.youtube.com/embed/nr8biZfSZ3Y" title="YouTube video" frameborder="0" allowfullscreen=""></iframe></div> <p>Well, I wish myself luck on this journey as I will surely need it.</p> <p><em>Expect cool things! (hopefully)</em></p>',1);function ka(l){var s=Ca();u(10),t(l,s)}const Vp=Object.freeze(Object.defineProperty({__proto__:null,default:ka,metadata:ts},Symbol.toStringTag,{value:"Module"})),Fs={title:"summer-break",description:"returning to blogging + halim-1",date:"2025-06-21T00:00:00.000Z",tags:["codeforces","website-update"],published:!0},{title:Wp,description:Hp,date:Gp,tags:Yp,published:Jp}=Fs;var Ba=e("<h1>I shall return</h1> <p>I have completely neglected this blog for an entire semester, it was pretty hectic. But now:</p> <ul><li>I plan to return and continue writing more consistently.</li> <li>I will probably also develope the website more actively.</li> <li>I will start off today. I low-key forgot everything so I will start again from chapter 2, but this time I will do exhaustively.</li></ul>",1);function $a(l){var s=Ba();u(4),t(l,s)}const Xp=Object.freeze(Object.defineProperty({__proto__:null,default:$a,metadata:Fs},Symbol.toStringTag,{value:"Module"}));export{Lp as A,Vp as B,Xp as C,Pa as _,Ua as a,Ya as b,ln as c,cn as d,fn as e,bn as f,kn as g,Sn as h,Kn as i,Rn as j,Jn as k,pl as l,rl as m,fl as n,bl as o,kl as p,Sl as q,Kl as r,Rl as s,Jl as t,pp as u,rp as v,fp as w,bp as x,kp as y,Sp as z};
