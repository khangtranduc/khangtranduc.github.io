import{a as e,t}from"./disclose-version.BMRgdCIc.js";import"./legacy.5F527xSo.js";import{L as a,M as c}from"./runtime.Bf9b1N9Y.js";import{h as l}from"./html.DjBeKjpD.js";const i={title:"coding-16",description:"Kattis - gcpc",date:"2025-01-12T00:00:00.000Z",tags:["daily-coding"],published:!0};var r=t("<h2>Kattis – gcpc</h2> <p>Completed today’s daily coding a bit later than the others, which can all be attributed to waking up late (right now is 9:11pm). This problem is really interesting because I got to used a cool trick from halim. That is <strong>policy-based data structures</strong>.</p> <p>Essentially, this gives me an STL-like tree that also implements fast <code>select</code> and <code>rank</code> operations, called an “ordered statistics tree” by Halim.</p> <p>An example (from Halim’s book):</p> <!> <h2>my solution</h2> <!>",1);function B(p){var s=r(),n=a(c(s),8);l(n,()=>`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">#include </span><span style="color:#A6ACCD">&#x3C;</span><span style="color:#5DE4C7">bits/stdc++.h</span><span style="color:#A6ACCD">></span><span style="color:#A6ACCD"> </span></span>
<span class="line"><span style="color:#5DE4C7">using</span><span style="color:#91B4D5"> namespace</span><span style="color:#91B4D5"> std</span><span style="color:#A6ACCD">; </span></span>
<span class="line"><span style="color:#A6ACCD">#include </span><span style="color:#A6ACCD">&#x3C;</span><span style="color:#5DE4C7">bits/extc++.h</span><span style="color:#A6ACCD">></span><span style="color:#767C9DB0;font-style:italic"> // pbds </span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">using</span><span style="color:#91B4D5"> namespace</span><span style="color:#91B4D5"> __gnu_pbds</span><span style="color:#A6ACCD">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">typedef</span><span style="color:#A6ACCD"> tree</span><span style="color:#91B4D5">&#x3C;int</span><span style="color:#A6ACCD">, null_type, less</span><span style="color:#91B4D5">&#x3C;int></span><span style="color:#A6ACCD">,</span></span>
<span class="line"><span style="color:#A6ACCD">			rb_tree_tag, tree_order_statistics_node_update</span><span style="color:#91B4D5">></span><span style="color:#A6ACCD"> ost; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">int</span><span style="color:#ADD7FF"> main</span><span style="color:#A6ACCD">() &#123; </span></span>
<span class="line"><span style="color:#91B4D5">	int</span><span style="color:#A6ACCD"> n </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 9</span><span style="color:#A6ACCD">; </span></span>
<span class="line"><span style="color:#91B4D5">	int</span><span style="color:#A6ACCD"> A[] </span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD"> &#123; </span><span style="color:#5DE4C7">2</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">4</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">7</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">10</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">15</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">23</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">50</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">65</span><span style="color:#A6ACCD">,</span><span style="color:#5DE4C7">71</span><span style="color:#A6ACCD">&#125;; </span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	// as in Chapter 2 ost tree; </span></span>
<span class="line"><span style="color:#A6ACCD">	for (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD"> i </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">; i </span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD"> n; </span><span style="color:#91B4D5">++</span><span style="color:#A6ACCD">i)</span><span style="color:#767C9DB0;font-style:italic"> // O(n log n) </span></span>
<span class="line"><span style="color:#E4F0FB">		tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">insert</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">A</span><span style="color:#A6ACCD">[i]);</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	// O(log n) select</span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#91B4D5"> *</span><span style="color:#E4F0FB">tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">find_by_order</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // 1-smallest = 2 </span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#91B4D5"> *</span><span style="color:#E4F0FB">tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">find_by_order</span><span style="color:#A6ACCD">(n</span><span style="color:#91B4D5">-</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // 9-smallest/largest = 71 </span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#91B4D5"> *</span><span style="color:#E4F0FB">tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">find_by_order</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">4</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // 5-smallest = 15 </span></span>
<span class="line"><span style="color:#A6ACCD">	</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	// O(log n) rank </span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#E4F0FB"> tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">order_of_key</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">2</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // index 0 (rank 1) </span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#E4F0FB"> tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">order_of_key</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">71</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // index 8 (rank 9) </span></span>
<span class="line"><span style="color:#A6ACCD">	cout </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#E4F0FB"> tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">order_of_key</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">15</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">&#x3C;&#x3C;</span><span style="color:#A6ACCD"> "</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">;</span><span style="color:#767C9DB0;font-style:italic"> // index 4 (rank 5) </span></span>
<span class="line"><span style="color:#A6ACCD">	return </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">; </span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`);var o=a(n,4);l(o,()=>`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">#include </span><span style="color:#A6ACCD">&#x3C;</span><span style="color:#5DE4C7">bits/stdc++.h</span><span style="color:#A6ACCD">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">#include </span><span style="color:#A6ACCD">&#x3C;</span><span style="color:#5DE4C7">bits/extc++.h</span><span style="color:#A6ACCD">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">using</span><span style="color:#91B4D5"> namespace</span><span style="color:#91B4D5"> std</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">using</span><span style="color:#91B4D5"> namespace</span><span style="color:#91B4D5"> __gnu_pbds</span><span style="color:#A6ACCD">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#5DE4C7">typedef</span><span style="color:#A6ACCD"> tree</span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD">pair</span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD">pair</span><span style="color:#91B4D5">&#x3C;int</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int></span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int></span><span style="color:#A6ACCD">, null_type, greater</span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD">pair</span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD">pair</span><span style="color:#91B4D5">&#x3C;int</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int></span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int>></span><span style="color:#A6ACCD">, rb_tree_tag, </span></span>
<span class="line"><span style="color:#A6ACCD">            tree_order_statistics_node_update</span><span style="color:#91B4D5">></span><span style="color:#A6ACCD"> ost;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">int</span><span style="color:#ADD7FF"> main</span><span style="color:#A6ACCD">() &#123;</span></span>
<span class="line"><span style="color:#91B4D5">    int</span><span style="color:#A6ACCD"> n, m, i, b;</span></span>
<span class="line"><span style="color:#ADD7FF">    scanf</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#E4F0FB">%d</span><span style="color:#E4F0FB"> %d</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">&#x26;</span><span style="color:#A6ACCD">n, </span><span style="color:#91B4D5">&#x26;</span><span style="color:#A6ACCD">m);</span></span>
<span class="line"><span style="color:#A6ACCD">    </span></span>
<span class="line"><span style="color:#A6ACCD">    ost tree;</span></span>
<span class="line"><span style="color:#A6ACCD">    unordered_map</span><span style="color:#91B4D5">&#x3C;int</span><span style="color:#A6ACCD">, pair</span><span style="color:#91B4D5">&#x3C;int</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">int>></span><span style="color:#A6ACCD"> mp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">    for (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD"> i </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">; i </span><span style="color:#91B4D5">&#x3C;=</span><span style="color:#A6ACCD"> n; i</span><span style="color:#91B4D5">++</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#ADD7FF">        tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">insert</span><span style="color:#A6ACCD">(&#123;&#123;</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">&#125;, </span><span style="color:#91B4D5">-</span><span style="color:#A6ACCD">i&#125;);</span></span>
<span class="line"><span style="color:#ADD7FF">        mp</span><span style="color:#A6ACCD">[i] </span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">, </span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">&#125;;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">    while (m</span><span style="color:#91B4D5">--</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#ADD7FF">        scanf</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#E4F0FB">%d</span><span style="color:#E4F0FB"> %d</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#91B4D5">&#x26;</span><span style="color:#A6ACCD">i, </span><span style="color:#91B4D5">&#x26;</span><span style="color:#A6ACCD">b);</span></span>
<span class="line"><span style="color:#ADD7FF">        tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">erase</span><span style="color:#A6ACCD">(&#123;</span><span style="color:#ADD7FF">mp</span><span style="color:#A6ACCD">[i], </span><span style="color:#91B4D5">-</span><span style="color:#A6ACCD">i&#125;);</span></span>
<span class="line"><span style="color:#ADD7FF">        mp</span><span style="color:#A6ACCD">[i] </span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD"> &#123;</span><span style="color:#ADD7FF">mp</span><span style="color:#A6ACCD">[i].</span><span style="color:#E4F0FB">first</span><span style="color:#91B4D5"> +</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">, </span><span style="color:#ADD7FF">mp</span><span style="color:#A6ACCD">[i].</span><span style="color:#E4F0FB">second</span><span style="color:#91B4D5"> -</span><span style="color:#A6ACCD"> b&#125;;</span></span>
<span class="line"><span style="color:#ADD7FF">        tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">insert</span><span style="color:#A6ACCD">(&#123;</span><span style="color:#ADD7FF">mp</span><span style="color:#A6ACCD">[i], </span><span style="color:#91B4D5">-</span><span style="color:#A6ACCD">i&#125;);</span></span>
<span class="line"><span style="color:#ADD7FF">        printf</span><span style="color:#A6ACCD">(</span><span style="color:#A6ACCD">"</span><span style="color:#E4F0FB">%d</span><span style="color:#5FB3A1">&#92;n</span><span style="color:#A6ACCD">"</span><span style="color:#A6ACCD">, </span><span style="color:#ADD7FF">tree</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">order_of_key</span><span style="color:#A6ACCD">(&#123;</span><span style="color:#ADD7FF">mp</span><span style="color:#A6ACCD">[</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">], </span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">&#125;) </span><span style="color:#91B4D5">+</span><span style="color:#5DE4C7"> 1</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`),e(p,s)}export{B as default,i as metadata};
